<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Worker Model on CDS Documentation</title>
    <link>https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/</link>
    <description>Recent content in Worker Model on CDS Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Worker Model From Docker Hub</title>
      <link>https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/docker-simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/docker-simple/</guid>
      <description>A worker model of type docker can be spawned by a Hatchery Docker Swarm.
Register a worker Model from an existing Docker Image Docker Image golang:1.8.1 have a &amp;ldquo;curl&amp;rdquo; in $PATH, so it can be used as it is.
 In the UI, click on the wheel on the hand right top corner and select *workers&amp;rdquo; (or go the the route #/worker) At the bottom of the page, fill the form  Name of your worker Golang-1.</description>
    </item>
    
    <item>
      <title>Worker Model with your own image</title>
      <link>https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/docker-customized/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/docker-customized/</guid>
      <description>A worker model of type docker can be spawned by a Hatchery Docker Swarm
Setup Docker Worker Model with your own image In this example, we will build a Docker model able to build an AngularJs application with webfonts. To create webfonts, a grunt task (optionnally) requires fontforge and ttfautohint.
The following tools must be included in the model:
 NodeJs and npm bower grunt-cli gulp-cli fontforge ttfautohint  We will use the official nodejs image from Docker.</description>
    </item>
    
    <item>
      <title>Openstack Worker Model</title>
      <link>https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/openstack/</guid>
      <description>CDS build using OVH.com Openstack infrastructure
Create Openstack user In OVH manager, in cloud section, click on the menu on the Servers&amp;gt;Openstack item.
You will be able to create a worker model Openstack user, enter description (name and password will be generated).
Add Openstack worker model We need to define an Openstack worker model to have Openstack hatchery booting workers.
We will create a model called docker:
 With low hardware capacity (vps-ssd-1) On Debian 8 With docker ready to use Git installed  First, define a udata file.</description>
    </item>
    
    <item>
      <title>VSphere Worker Model</title>
      <link>https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/vsphere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/vsphere/</guid>
      <description>CDS build using VSphere infrastructure
Add VSphere worker model We need to define a VSphere worker model to have VSphere hatchery booting workers.
We will create a worker model called debian8-docker:
 On Debian 8 With docker ready to use Git installed  First, define a udata file. It is a shell script executed just after the boot sequence complete. Our udata will look like this:
# Install docker cd $HOME apt-get -y --force-yes update &amp;gt;&amp;gt; /tmp/user_data 2&amp;gt;&amp;amp;1 apt-get install -y --force-yes apt-transport-https ca-certificates &amp;gt;&amp;gt; /tmp/user_data 2&amp;gt;&amp;amp;1 apt-key adv --keyserver hkp://p80.</description>
    </item>
    
  </channel>
</rss>