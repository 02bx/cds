<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hatchery on CDS Documentation</title>
    <link>https://ovh.github.io/cds/hatchery/</link>
    <description>Recent content in Hatchery on CDS Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ovh.github.io/cds/hatchery/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hatchery Local</title>
      <link>https://ovh.github.io/cds/hatchery/local/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/hatchery/local/</guid>
      <description>Use case If you are a CDS user, you can use shared.infra Worker to run your job.
But, if you want to use your host for various good reasons as OS, Network, etc&amp;hellip; you can launch CDS Worker on your host.
Two prerequisites:
 your host must reach your CDS API on HTTP port or GPRC Port defined on your CDS Configuration you need the CDS Worker binary on your host.</description>
    </item>
    
    <item>
      <title>Hatchery Marathon</title>
      <link>https://ovh.github.io/cds/hatchery/marathon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/hatchery/marathon/</guid>
      <description>Start Marathon hatchery Generate a token for group:
$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Edit the CDS Configuration or set the dedicated environment variables. To enable the hatchery, just set the API HTTP and GRPC URL, the token freshly generated.
Then start hatchery:
engine start hatchery:marathon --config config.toml  This hatchery will spawn Application on Marathon. Each application is a CDS Worker, using the Worker Model of type &amp;lsquo;docker&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Hatchery Openstack</title>
      <link>https://ovh.github.io/cds/hatchery/openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/hatchery/openstack/</guid>
      <description>CDS build using Openstack infrastructure to spawn each CDS Workers inside dedicated virtual machine.
Start Opentack hatchery Generate a token for group:
$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Edit the CDS configuration or set the dedicated environment variables. To enable the hatchery, just set the API HTTP and GRPC URL, the token freshly generated and the openstack variables.
Then start hatchery:
engine start hatchery:openstack --config config.</description>
    </item>
    
    <item>
      <title>Hatchery Swarm</title>
      <link>https://ovh.github.io/cds/hatchery/swarm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/hatchery/swarm/</guid>
      <description>CDS build using Docker Swarm to spawn CDS Worker.
Start Swarm hatchery Generate a token for group:
$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Edit the CDS configuration or set the dedicated environment variables. To enable the hactchery, just set the API HTTP and GRPC URL, the token freshly generated.
This hatchery use the standard docker environment variables to connect to a docker host.
Then start hatchery:</description>
    </item>
    
    <item>
      <title>Hatchery Vsphere</title>
      <link>https://ovh.github.io/cds/hatchery/vsphere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/hatchery/vsphere/</guid>
      <description>CDS build using VMWare Vsphere infrastructure to spawn each CDS Workers inside dedicated VM.
Pre-requisites This hatchery spawns VM which obtains IP from DHCP. So first you have to create a DHCP server on your host with NAT if you want to access to the internet. In order to create you have multiple possibilities like create your own VM with a DHCP server configured or if you are comfortable with the VMWare tools you can use the NSX system.</description>
    </item>
    
    <item>
      <title>Update your hatchery</title>
      <link>https://ovh.github.io/cds/hatchery/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/hatchery/update/</guid>
      <description> Manual Update If you run manually a Hatchery, you problably want to update it when CDS Engine is updated with a new release.
Update your hatchery from CDS API:
./engine update --api https://your.cds.instance  Update your hatchery from latest Release from Github:
./engine update --from-github  </description>
    </item>
    
    <item>
      <title>Write your own hatchery</title>
      <link>https://ovh.github.io/cds/hatchery/create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/hatchery/create/</guid>
      <description>Example with a creation of a VSphere hatchery  First of all you need to create a new package like the other into the hatchery package. Let&amp;rsquo;s call this package vsphere for our example.
 You have to implement the Service interface (see here) in order to configure launch this new hatchery mode via CDS engine CLI.
 Your have to create a Configuration structure composed of the hatchery.CommonConfiguration and the variables you need to access to Vsphere API.</description>
    </item>
    
  </channel>
</rss>