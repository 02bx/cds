<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Building-pipelines on CDS Documentation</title>
    <link>https://ovh.github.io/cds/building-pipelines/</link>
    <description>Recent content in Building-pipelines on CDS Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ovh.github.io/cds/building-pipelines/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Artifact Download</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.artifact-download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.artifact-download/</guid>
      <description>Artifact Download Action is a builtin action, you can&amp;rsquo;t modify it.
This action can be used to get artifact uploaded by the Artifact Upload action
Action Parameter  application: Application from where artifacts will be downloaded pipeline: Pipeline from where artifacts will be downloaded tag: Tag set in the Artifact Upload action path: Path where artifacts will be downloaded  Example  Workflow Configuration: a pipeline doing an upload artifact and another doing a download artifact.</description>
    </item>
    
    <item>
      <title>Artifact Upload</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.artifact-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.artifact-upload/</guid>
      <description> Artifact Upload Action is a builtin action, you can&amp;rsquo;t modify it.
This action can be used to upload artifact in CDS. This is the good way to share files between pipelines or stages.
Action Parameter  path: Path of file to upload tag: Tag to apply to your file.  Example  Create a file myFile and upload it.   Launch pipeline, check logs   View artifact  </description>
    </item>
    
    <item>
      <title>GitClone</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.gitclone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.gitclone/</guid>
      <description>GitClone is a builtin action, you can&amp;rsquo;t modify it.
This action clone a repository into a new directory.
Git Clone will be done with a depth of 1.
You can use a privateKey, this is usually a project or application variable of type key. {{.cds.app.a-key.pub}}
Parameters  url - mandatory - URL must contain information about the transport protocol, the address of the remote server, and the path to the repository.</description>
    </item>
    
    <item>
      <title>JUnit</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.junit/</guid>
      <description> JUnit is a builtin action, you can&amp;rsquo;t modify it.
This action parse given file to extract Unit Test results.
Parameters  path: Path to junit xml file  Example  Job Configuration.   Launch pipeline, check XUnit Result   And view details:  </description>
    </item>
    
    <item>
      <title>Script</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin.script/</guid>
      <description> Script is a builtin action, you can&amp;rsquo;t modify it.
This action execute a script, written in script attribute
Parameters  script: Content of your script. You can put  #!/bin/bash  or
#!/bin/perl  at first line.
Make sure that the binary used is in the pre-requisites of action
Variable You can use CDS Variables in a step script.
Example  Job Configuration, a step with perl, another with bash   Launch pipeline, check logs  </description>
    </item>
    
    <item>
      <title>cds-docker-package</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user.cds-docker-package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user.cds-docker-package/</guid>
      <description>Build image and push it to docker repository
Parameters  dockerOpts: Docker options, Enter &amp;ndash;no-cache &amp;ndash;pull if you want for example dockerRegistry: Docker Registry. Enter myregistry for build image myregistry/myimage:mytag dockerfileDirectory: Directory which contains your Dockerfile. imageName: Name of your docker image, without tag. Enter myimage for build image myregistry/myimage:mytag imageTag: Tag of your docker image. Enter mytag for build image myregistry/myimage:mytag. {{.cds.version}} is a good tag from CDS. You can use many tags: firstTag,SecondTag Example : {{.</description>
    </item>
    
    <item>
      <title>cds-go-build</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user.cds-go-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user.cds-go-build/</guid>
      <description>Go Build: compile a go program
Parameters  architecture: GOOS artifactUpload: Upload Binary as CDS Artifact binary: Binary name: Put foo for go build -o foo detectRaceCondition: Enable data race detection. It&amp;rsquo;s flag -race flags: flags for go build. Put -ldflags &amp;ldquo;-X main.xyz=abc&amp;rdquo; for go build -ldflags &amp;ldquo;-X main.xyz=abc&amp;rdquo; gopath: set a $GOPATH. If empty, this action try to get env $GOPATH. If $GOPATH is empty, action will set it to $HOME/go os: GOOS package: go package to compile.</description>
    </item>
    
    <item>
      <title>cds-nexus-upload</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user.cds-nexus-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user.cds-nexus-upload/</guid>
      <description>Upload file on Nexus
Parameters  artifactId: Artifact id of the artifact extension: Extension of the artifact files: Regex of files you want to upload groupId: Group id of the artifact login: Login for nexus packaging: Packaging type of the artifact password: Password for nexus repository: Nexus repository that the artifact is contained in url: Nexus URL version: Version of the artifact. Supports resolving of &amp;lsquo;LATEST&amp;rsquo;, &amp;lsquo;RELEASE&amp;rsquo; and snapshot versions (&amp;lsquo;1.</description>
    </item>
    
    <item>
      <title>cds-perl-test</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user.cds-perl-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user.cds-perl-test/</guid>
      <description>Test with prove on perl source code
Parameters  testDirectory: Directory where is Perl Source Code  Requirements  bash: type: binary Value: bash perl: type: binary Value: perl prove: type: binary Value: prove  More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-cds-plugin</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-cds-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-cds-plugin/</guid>
      <description>This template creates a pipeline for building CDS Plugin with:
 A &amp;ldquo;Commit Stage&amp;rdquo; with one job &amp;ldquo;Compile&amp;rdquo; Job contains two steps: GitClone and CDS_GoBuild  Parameters  package.root: example: github.com/ovh/cds package.sub: Directory inside your repository where is the plugin. Enter &amp;ldquo;contrib/plugins/your-plugin&amp;rdquo; for github.com/ovh/cds/contrib/plugins/your-plugin
 repo: Your source code repository
  More More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-cds-template</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-cds-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-cds-template/</guid>
      <description>This template creates a pipeline for building CDS Template with:
 A &amp;ldquo;Commit Stage&amp;rdquo; with one job &amp;ldquo;Compile&amp;rdquo; Job contains two steps: GitClone and CDS_GoBuild  Parameters  package.root: example: github.com/ovh/cds package.sub: Directory inside your repository where is the template. Enter &amp;ldquo;contrib/templates/your-plugin&amp;rdquo; for github.com/ovh/cds/contrib/templates/your-plugin
 repo: Your source code repository
  More More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-deploy-marathon-app</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-deploy-marathon-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-deploy-marathon-app/</guid>
      <description>This template creates:
 a deployment pipeline with one stage, and containing one job job calls plugin-marathon an application with a variable named &amp;ldquo;marathon.config&amp;rdquo; uses environment variables marathonHost, password and user  Please update Application / Environment Variables after creating application.
Parameters  docker.image: Your docker image without the tag marathon.appID: Your marathon application ID marathon.config: Content of your marathon.json file  More More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-only-git-clone-job</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-only-git-clone-job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-only-git-clone-job/</guid>
      <description>This template creates:
 a build pipeline with one stage, containing one job job contains 2 steps: GitClone and a empty script.  Pipeline name contains Application name. If you want to make a reusable pipeline, please consider updating this name after creating application.
Parameters  repo: Your source code repository  More More documentation on Github</description>
    </item>
    
    <item>
      <title>cds-template-plain</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-plain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates.cds-template-plain/</guid>
      <description>This template creates:
 a build pipeline with two stages: Commit Stage and Packaging Stage a deploy pipeline with one stage: Deploy Stage  Commit Stage:
 run git clone run make build  Packaging Stage:
 run docker build and docker push  Deploy Stage:
 it&amp;rsquo;s an empty script  Packaging and Deploy are optional.
Parameters  repo: Your source code repository withDeploy: Do you want an deploy Pipeline?</description>
    </item>
    
    <item>
      <title>plugin-download</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-download/</guid>
      <description>This is a plugin to download file from URL
Parameters  filepath: the destination of your file to be copied headers: specific headers to add to your request (&amp;ldquo;headerName&amp;rdquo;=&amp;ldquo;value&amp;rdquo; newline separated list) url: the url of your file  More More documentation on Github</description>
    </item>
    
    <item>
      <title>plugin-group-tmpl</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-group-tmpl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-group-tmpl/</guid>
      <description>This actions helps you generate a marathon group application file. It takes a config template file as a single application, and creates the group with the variables specified for each application in the applications files. Check documentation on text/template for more information https://golang.org/pkg/text/template.
Parameters  applications: Applications file variables config: Template file to use output: Output path for generated file (default to .out or just trimming .tpl extension)  More More documentation on Github</description>
    </item>
    
    <item>
      <title>plugin-kafka-publish</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-kafka-publish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-kafka-publish/</guid>
      <description>This action helps you to send data through Kafka across every network.
You are able to send a custom &amp;quot;message&amp;quot; file and all the artifacts you want: there is no file size limit. To improve security, you can encrypt the files content with a GPG Key. From the consumer side, you will need to decrypt files content with you GPG private key and your passphrase. This action is a CDS Plugin packaged as a single binary file you can download and use to listen and consume data coming from CDS through Kafka.</description>
    </item>
    
    <item>
      <title>plugin-marathon</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-marathon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-marathon/</guid>
      <description>This action helps you to deploy on Mesos/Marathon. Provide a marathon.json file to configure deployment.
Your marathon.json file can be templated with cds variables &amp;ldquo;{{.cds.variables}}&amp;rdquo;. Enable &amp;ldquo;waitForDeployment&amp;rdquo; option to ensure deployment is successfull.
Parameters  configuration: Marathon application configuration file (json format) insecureSkipVerify: Skip SSL Verify if you want to use self-signed certificate password: Marathon Password (please use project, application or environment variables) timeout: Marathon deployment timeout (seconds). Used only if &amp;ldquo;waitForDeployment&amp;rdquo; is true.</description>
    </item>
    
    <item>
      <title>plugin-ssh-cmd</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-ssh-cmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-ssh-cmd/</guid>
      <description>This plugin helps you to run cmd on remote server over ssh.
Parameters  command: Command commandTimeout: Command Timeout (seconds) hostnames: Hostnames (comma separated values) privateKey: SSH RSA private key timeout: Timeout (seconds) username: Username  More More documentation on Github</description>
    </item>
    
    <item>
      <title>plugin-tmpl</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-tmpl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-tmpl/</guid>
      <description>This action helps you generates a file using a template file and text/template golang package.
Check documentation on text/template for more information https://golang.org/pkg/text/template.
Parameters  file: Template file to use output: Output path for generated file (default to .out or just trimming .tpl extension) params: Parameters to pass on the template file (key=value newline separated list)  More More documentation on Github</description>
    </item>
    
    <item>
      <title>plugin-venom</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-venom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins.plugin-venom/</guid>
      <description>This plugin helps you to run venom. Venom: https://github.com/runabove/venom.
Add an extra step of type junit on your job to view tests results on CDS UI.
Parameters  details: Output Details Level: low, medium, high exclude: Exclude some files, one file per line loglevel: Log Level: debug, info, warn or error output: Directory where output xunit result file parallel: Launch Test Suites in parallel. Enter here number of routines path: Path containers yml venom files.</description>
    </item>
    
    <item>
      <title>Built-in Actions</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.builtin/</guid>
      <description>User actions use built-in action(s) and / or other existing action(s).
There can be created by CLI and / or Web UI.
User actions from CDS Contributions :
Artifact Download Artifact Upload GitClone JUnit Script </description>
    </item>
    
    <item>
      <title>User Actions</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.user-actions/</guid>
      <description>CDS User Actions are developed in CDS. There are available on all CDS Installation.
Built-in actions :
cds-docker-package cds-go-build cds-nexus-upload cds-perl-test </description>
    </item>
    
    <item>
      <title>First Pipeline with CLI</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.first-pipeline-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.first-pipeline-cli/</guid>
      <description>Create a project The first step is to create your own Project. A project contains applications, pipelines and environments.
You can use either the CLI or the UI to create your project.
$ cds project add TEST &amp;quot;My test project&amp;quot; test-team OK  Create a simple pipeline $ cds pipeline add TEST hello-pip Pipeline hello-pip created.  Create an application $ cds application add TEST hello-world Aplication hello-world created.  Configure your pipeline We will add a script action in pipeline saying &amp;ldquo;Hello World !</description>
    </item>
    
    <item>
      <title>Plugins Actions</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions.plugins/</guid>
      <description>CDS Plugin System lets users develop complex actions. See How to write a plugin
CDS Administrators have to import plugins on CDS to let user use them.
Plugins from CDS Contributions:
plugin-download plugin-group-tmpl plugin-kafka-publish plugin-marathon plugin-ssh-cmd plugin-tmpl plugin-venom </description>
    </item>
    
    <item>
      <title>Building Pipelines</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines/</guid>
      <description> First Pipeline with CLI Use Configuration File Actions Templates Variables Job&amp;#39;s Requirements  </description>
    </item>
    
    <item>
      <title>Use Configuration File</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.configuration-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.configuration-file/</guid>
      <description>You can define a pipeline both in json format or in yaml format. Default is yaml format.
Basic configuration If you have a pretty simple build pipeline with one stage and one job. You can write such a configuration file
steps: - script: echo I&#39;m the firt step - script: echo I&#39;m the second step  This defines a pipeline of type build (it&amp;rsquo;s the default type), named Build (the default name for a build Pipeline).</description>
    </item>
    
    <item>
      <title>Actions</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.actions/</guid>
      <description>Inside a Job, each steps is based on an action.
Types of actions :
 Built-in actions, available on each CDS Installation User actions, added by CDS Administrators for now Plugins actions, added by CDS Administrators  </description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.templates/</guid>
      <description>CDS models allow users to:
 quickly create a workflow, with applications, pipelines and triggers reuse best practices for some use cases  Templates from CDS Contributions :
cds-template-cds-plugin cds-template-cds-template cds-template-deploy-marathon-app cds-template-only-git-clone-job cds-template-plain </description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.variables/</guid>
      <description>In CDS, it is possible to define variables at different levels:
 Project Environment Application  Variable types Existing variable types:
 String Text Boolean Number Password Key  Placeholder format All variables in CDS can be invoked using the simple {{.VAR}} format. To simplify the use between all the variable sources, we have defined the following prefixes:
 Action variable: {{.VAR}} Builtin CDS: {{.cds.VAR}} Git: {{.git.VAR}} Pipeline: {{.cds.pip.VAR}} Application: {{.</description>
    </item>
    
    <item>
      <title>Job&#39;s Requirements</title>
      <link>https://ovh.github.io/cds/building-pipelines/building-pipelines.requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/cds/building-pipelines/building-pipelines.requirements/</guid>
      <description>Type of requirements:
 Binary Model Hostname Network Service Memory OS (Not yet implemented) Architecture (Not yet implemented)  A Job will be executed by a worker.
CDS will choose and provision a worker for dependending of the requirements you define on your job.
You can set as many requirements as you want, following those rules :
 Only one model can be set as requirement Only one hostname can be set as requirement Memory and Services requirements are availabe only on Docker models  Screenshot Here a job with two requirements, Memory and Model:</description>
    </item>
    
  </channel>
</rss>