[
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/builtin/",
	"title": "Built-in Actions",
	"tags": [],
	"description": "",
	"content": "Built-in actions are integrated in CDS. You can’t modify them.\nBuilt-in actions :\n Artifact Download Artifact Upload GitClone JUnit Script  "
},
{
	"uri": "https://ovh.github.io/cds/introduction/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": " A Step This is a step, using an action script. See step concept and actions documentation.\nA Job A job is composed of several steps. See job concept.\nA Stage A stage is composed of several jobs. See stage concept.\nA Pipeline A stage is composed of several jobs. See pipeline concept.\nA Workflow A stage is composed of several pipelines. See Workflow documentation.\nA Project A project represents an organisation, it contains workflows, applications, pipelines and environments. It can be linked to platforms\nA Platform A platform represents a link between CDS and another external platform (Kafka, Openstack)\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/",
	"title": "Design your Workflow",
	"tags": [],
	"description": "",
	"content": "  Payload Pipeline Context Hooks Run conditions on pipeline Join Mutex Sidebar Workflows Advanced  "
},
{
	"uri": "https://ovh.github.io/cds/hosting/ready-to-run/docker-compose/",
	"title": "Docker Compose",
	"tags": [],
	"description": "",
	"content": " Run with Docker-Compose The docker-compose.yml contains:\n cds-db service with a postgresql cds-cache service with a redis cds-migrate service to prepare DB tables cds-api service cds-ui service cds-hatchery-swarm service cds-hatchery-local service  Docker compose is very convenient to launch CDS for testing it. But this is not recommended for a Production Installation.\nHow to run $ git clone https://github.com/ovh/cds.git $ cd cds $ export HOSTNAME=$(hostname) # Create PG Database $ docker-compose up --no-recreate -d cds-db # check if db is UP # check if last log is \u0026quot;LOG: database system is ready to accept connections\u0026quot; $ docker-compose logs $ docker-compose up --no-recreate cds-migrate # You should have this log: \u0026quot;cds_cds-migrate_1 exited with code 0\u0026quot; # run API and UI $ docker-compose up cds-api cds-ui  Open a browser on http://localhost:2015, then register a new user. As there is no SMTP server configured in docker-compose.yml file, run docker-compose logs to get URL for validate the registration.\nPrepare Project, Pipeline and Application On UI http://localhost:2015:\n Create a project Create a workflows On the first Pipeline, add a stage and a job Inside job, add a step of type \u0026ldquo;script\u0026ldquo; In script content, add theses lines:  #!/bin/bash set -ex echo \u0026quot;foo\u0026quot; sleep 10 echo \u0026quot;bar\u0026quot;  Run Pipeline Run pipeline. As you can see now, your pipeline is in \u0026ldquo;waiting status\u0026rdquo;. You have to run a CDS Worker or a CDS Hatchery which aims to create workers.\nLet\u0026rsquo;s run a hatchery with docker-compose.\nWe will spawn a container with a hatchery in local mode. Workers will be spawn inside this container.\n$ docker-compose up cds-hatchery-local  Running a hatchery \u0026ldquo;local\u0026rdquo; in a container is not recommended. Use this way only for testing purpose.\nAfter running this Hatchery, a worker will be spawned. Your pipeline will be in \u0026ldquo;Building\u0026rdquo;, then \u0026ldquo;Success\u0026rdquo; status.\nHatchery Docker Swarm The docker-compose.yml runs hatchery belonging to the shared.infra groups.\nA local hatchery spawns workers on the same host as the hatchery. This is usually useful for specific cases, as running job on specific hardware. But this hatchery does not make it possible to respect the isolation of workpaces of workers as they share the same workspace.\nThere is another hatchery configured in docker-compose.yml file: a \u0026lsquo;swarm hatchery\u0026rsquo;\nPlease check that your docker installation allows docker API calls on tcp://${HOSTNAME}:2375 Otherwise, please update environment variable DOCKER_HOST: tcp://${HOSTNAME}:2375 in docker-compose.yml\n$ export HOSTNAME=$(hostname) $ docker-compose up cds-hatchery-swarm  A swarm hatchery spawns CDS Workers inside dedicated containers. This ensures isolation of the workspaces and resources.\nNow, you have to create worker model of type docker, please follow how to create a worker model docker.\nNext with Actions, Plugins  You can download CDS CLI from https://github.com/ovh/cds/releases Run:\n$ mv cds-linux-amd64 cds $ chmod +x cds $ ./cds login # enter: http://${HOSTNAME}:8081 as CDS Endpoint  Import actions, example:\n# get cds-docker-package.hcl from https://github.com/ovh/cds/blob/master/contrib/actions/ $ cdsctl action import cds-docker-package.hcl  Import plugins, example:\n# download plugin-download-linux-amd64 from https://github.com/ovh/cds/releases $ mv plugin-download-linux-amd64 plugin-download $ cds admin plugin add ./plugin-download   Go further  How to use Openstack infrastructure to spawn CDS container read more Link CDS to a repository manager, as Github, Bitbucket Server or Gitlab read more Learn more about CDS variables read more  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/docker/",
	"title": "Docker Worker Model",
	"tags": [],
	"description": "",
	"content": " A worker model of type docker can be spawned by a Hatchery Docker Swarm or a Hatchery Marathon.\nRegister a worker Model from an existing Docker Image Docker Image golang:1.8.1 have a \u0026ldquo;curl\u0026rdquo; in $PATH, so it can be used as it is.\n In the UI, click on the wheel on the hand right top corner and select *workers\u0026rdquo; (or go the the route #/worker) At the bottom of the page, fill the form  Name of your worker Golang-1.8.1 type docker image golang:1.8.1  Click on Add button and that\u0026rsquo;s it  Worker Model Docker on Hatchery Swarm This hatchery offers some features on job pre-requisites, usable only on user\u0026rsquo;s hatchery (ie. not a shared.infra hatchery).\n Service Link options on worker model prerequisite  Port mapping: --port=8080:8081/tcp --port=9080:9081/tcp Priviledge flag: --privileged Add host flag: --add-host=aaa:1.2.3.4 --add-host=bbb:5.6.7.8 Use all: --port=8080:8081/tcp --privileged --port=9080:9081/tcp --add-host=aaa:1.2.3.4 --add-host=bbb:5.6.7.8  options on volume prerequisite  Bind: type=bind,source=/hostDir/sourceDir,destination=/dirInJob,readonly   "
},
{
	"uri": "https://ovh.github.io/cds/hosting/repositories-manager/github/",
	"title": "Github",
	"tags": [],
	"description": "",
	"content": " Authorize CDS on Github Create a CDS application on Github Go to https://github.com/settings/developers and Register a new application: set an application name, the url and a description. Authorization callback URL: http(s)://\u0026lt;your-cds-api\u0026gt;/repositories_manager/oauth2/callback\nOn the next page Github give you a Client ID and a Client Secret\nComplete CDS Configuration File Set value to clientId and clientSecret\n[vcs.servers.github] # URL of this VCS Server url = \u0026quot;https://github.com\u0026quot; [vcs.servers.github.github] # github OAuth Application Client ID clientId = \u0026quot;xxxx\u0026quot; # github OAuth Application Client Secret clientSecret = \u0026quot;xxxx\u0026quot; # Does polling is supported by VCS Server disablePolling = false # Does webhooks are supported by VCS Server disableWebHooks = false [vcs.servers.github.github.Status] # Set to true if you don't want CDS to push statuses on the VCS server disable = false # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server showDetail = true  Then restart CDS\nSee how to generate Configuration File\n"
},
{
	"uri": "https://ovh.github.io/cds/hatchery/local/",
	"title": "Hatchery Local",
	"tags": [],
	"description": "",
	"content": " Use case If you are a CDS user, you can use shared.infra Worker to run your job.\nBut, if you want to use your host for various good reasons as OS, Network, etc\u0026hellip; you can launch CDS Worker on your host.\nTwo prerequisites:\n your host must reach your CDS API on HTTP port or GPRC Port defined on your CDS Configuration you need the CDS Worker binary on your host.  You can download it from latest release on Github or from download page on your CDS Instance (Navbar -\u0026gt; Settings -\u0026gt; Download)\nStart Local hatchery Generate a token for group:\n$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Edit the CDS Configuration or set the dedicated environment variables. To enable the hatchery, just set the API HTTP and GRPC URL, the token freshly generated.\nThis hatchery use the CDS worker binary existing on the PATH on your host.\nThen start hatchery:\nengine start hatchery:local --config config.toml  This hatchery will now start worker binary on your host. You can manage settings, as max workers and provision in the hatchery configuration file.\n"
},
{
	"uri": "https://ovh.github.io/cds/introduction/concepts/pipeline/",
	"title": "Pipeline",
	"tags": [],
	"description": "",
	"content": " A pipeline describes how things need to be executed in order to obtain the expected result. In CDS, a pipeline belongs to a single project and can be used with the applications of that project.\nA pipeline is structured in sequential stages containing one or multiple concurrent jobs.\nCDS pipelines can be parametrized. This allows you to reuse the same pipeline when you have similar workloads. For example, you could use the same pipeline to deploy in your pre-production environment first and then to your production environment.\nYou can also define ACL on a pipeline.\nTriggers Example "
},
{
	"uri": "https://ovh.github.io/cds/introduction/scopes/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": " Project A project contains applications, pipelines and environments.\nA project is the first level of permissions management. Any CDS application has to be created inside a project.\nThe project key has to be unique among all projects in CDS.\nAt creation, a project has to have at least one group with edition permissions on it. It is possible to use either an existing group or create a new one.\nIf the provided group does not exist, a default group will be created with edition permissions on project and the group creator will be automatically created to that group.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/hooks/scheduler/",
	"title": "Scheduler",
	"tags": [],
	"description": "",
	"content": "On a Root Pipeline, you can add a \u0026ldquo;Hook Scheduler\u0026rdquo;. This kind of hook is useful when you want to launch a workflow periodically (for example each day at 1AM). You can use the Crontab Expression Format to configure your scheduler\u0026rsquo;s period. You can also configure a specific payload for your scheduler.\n"
},
{
	"uri": "https://ovh.github.io/cds/introduction/scopes/",
	"title": "Scopes &amp; ACLs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/requirements/service/",
	"title": "Service Link",
	"tags": [],
	"description": "",
	"content": " The Service Link prerequisite allow you to use any docker image as a dependency of a job.\nThis is pretty useful if you want to make some tests with a real database, or put your builded application as a job prerequisite for doing some tests.\nExamples  Service Requirement Nginx Service Requirement PostgreSQL  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/requirements/service/example-nginx/",
	"title": "Service Requirement Nginx",
	"tags": [],
	"description": "",
	"content": " Add the service requirement  Name: mypg. This will be the service hostname Type: service Docker Image: nginx:1.11.1. This is the name of docker image to link to current job  Add a step of type script docker image nginx:1.11.1 start a nginx at startup. So, it\u0026rsquo;s now available on http://mynginx\ncurl -v -X GET http://mynginx  Execute Pipeline\nSee output:\n"
},
{
	"uri": "https://ovh.github.io/cds/worker/setup-your-worker/",
	"title": "Setup your worker",
	"tags": [],
	"description": "",
	"content": " Why would you need to setup your own worker ? There is several cases where one would need to setup his own worker:\n Perform incremental build Build on a specific architecture Perform integration tests in a specific network  How does this work ? Workers authenticate on CDS with a token and have the same permissions as the user who generated it.\nGenerate a token with the following cdsctl command:\n$ cdsctl token generate yourgroup persistent  Linux Setup Download the binary Simple enough, run\n$ wget -nv https://your-cds-api/download/worker/linux/`uname -m` -O worker  Others OS / Architectures are available on your cds instance http://your-cds-ui/settings/downloads or on https://github.com/ovh/cds/releases.\nStartup the worker Mandatory parameters are \u0026ndash;api and \u0026ndash;token.\nThe most basic way to start a worker is as following:\n$ worker --api http://localhost:8081 --token 5459c00e70f31f4bd2c9762660983fff641a5e6b8cffc322a68586a95ed65c7f INFO[0000] running worker CDS_SINGLE_USE:false... INFO[0000] Current binary: /home/cds/worker 2018-01-17 22:27:40 [INFO] CDS Worker starting 2018-01-17 22:27:40 [INFO] version: 0.25.1-snapshot+1693.cds 2018-01-17 22:27:40 [INFO] hostname: localhost.local 2018-01-17 22:27:40 [INFO] auto-update: false 2018-01-17 22:27:40 [INFO] single-use: false 2018-01-17 22:27:40 [INFO] Export variable HTTP server: 127.0.0.1:64781 2018-01-17 22:27:40 [INFO] Registering on CDS engine Version:0.25.1-snapshot+1693.cds 2018-01-17 22:27:40 [INFO] Registering localhost.local on http://localhost:8081 2018-01-17 22:27:40 [INFO] localhost.local Registered on http://localhost:8081  That\u0026rsquo;s it, you are done here.\nWindows Setup Download the binary Download the windows binary from https://github.com/ovh/cds/releases\nPrerequisites CDS Worker will launch Microsoft Powershell command. Please check Powershell is correctly installed and configured on your host. Every command CDS Worker will launch should be in the %PATH% variable.\nDo the following steps with the target User whom will run the CDS Worker.\nTo be able to operate git clone commands, you have to follow next steps :\n Install Git https://git-scm.com/download/win Setup your system %PATH%, and add C:\\Program Files\\Git\\mingw32\\bin;C:\\Program Files\\Git\\usr\\bin In a Powsershell Prompt, run PS Set-ExecutionPolicy Unrestricted You may want to improve your Git Experience on your windows host : have a look to posh-git : https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Powershell  Trigger your pipeline on your Host If you want to force you pipeline execution on your host, add a \u0026ldquo;hostname\u0026rdquo; requirement on you pipeline and set it to the hostname of your windows host.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/advanced/update-run-number/",
	"title": "Update a Workflow run number",
	"tags": [],
	"description": "",
	"content": "workflow -\u0026gt; advanced section. You can edit the run number to set you old cds.version value.\n{{cds.version}} is always usable, and equals to {{.cds.run.number}}\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/user/",
	"title": "User Actions",
	"tags": [],
	"description": "",
	"content": " A user action is a combination of built-in or plugin actions. A user can import user actions using the Web UI or the CLI:\nImport an action using the CLI $ git clone https://github.com/ovh/cds.git $ cd cds/contrib/actions/ $ cdsctl action import cds-docker-package.yml  See cdsctl action import documentation.\nCDS\u0026rsquo;s source code bundles a few user-actions that you may use directly or as a starting point for your own user-actions:\n cds-docker-package cds-go-build cds-nexus-upload cds-perl-test cds-publish-ovh-metrics cds-python-pylint  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/variables/",
	"title": "Variables",
	"tags": [],
	"description": "",
	"content": " In CDS, it is possible to define variables at different levels:\n Project Environment Application  Variable types Existing variable types:\n String Text Boolean Number Password Key  Placeholder format All variables in CDS can be invoked using the simple {{.VAR}} format. To simplify the use between all the variable sources, we have defined the following prefixes:\n Action variable: {{.VAR}} Builtin CDS: {{.cds.VAR}} Git: {{.git.VAR}} Pipeline: {{.cds.pip.VAR}} Application: {{.cds.app.VAR}} Environment: {{.cds.env.VAR}} Project: {{.cds.proj.VAR}} Exported variable at build time: {{.cds.build.VAR}}  Builtin variables Here is the list of builtin variables, generated for every build:\n {{.cds.environment}} The name of the current environment {{.cds.application}} The name of the current application {{.cds.job}} The name of the current job {{.cds.manual}} true if current pipeline is manually run, false otherwise {{.cds.pipeline}} The name of the current pipeline {{.cds.project}} The name of the current project {{.cds.run}} Run Number of current workflow, example: 3.0 {{.cds.run.number}} Number of current workflow, example: 3 if {{.cds.run}} = 3.0 {{.cds.run.subnumber}} Sub Number of current workflow, example: 4 if {{.cds.run}} = 3.4 {{.cds.stage}} The name of the current stage {{.cds.status}} Status or previous pipeline: Success or Failed {{.cds.triggered_by.email}} Email of the user who launched the current build {{.cds.triggered_by.fullname}} Full name of the user who launched the current build {{.cds.triggered_by.username}} Username of the user who launched the current build {{.cds.version}} The current version number, it\u0026rsquo;s an alias to {{.cds.run.number}} {{.cds.workflow}} The name of the current workflow {{.cds.workspace}} Current job\u0026rsquo;s workspace. It\u0026rsquo;s a directory. In a step script, {{.cds.workspace}} == $HOME  The .version variable {{.cds.version}}\nCDS version is a builtin variable set to the buildNumber of the last pipeline of type “build”. This variable is transmitted through triggers with the same value to both testing and deployment pipelines.\nExport a variable inside a step In a step of type script, you can export a variable as the following:\n$ worker export varname thevalue  You can now use {{.cds.build.varname}} in further steps and stages.\nShell Environment Variable All CDS variables, except password type, can be used as plain environment variables.\nTheses lines will have the same output\necho '{{.cds.parent.application}}' echo $CDS_PARENT_APPLICATION  Git variables Here is the list of git variables:\n {{.git.hash}} {{.git.url}} {{.git.http_url}} {{.git.branch}} {{.git.author}} {{.git.message}}  Helpers Some helpers are available to transform the value of a CDS Variable.\nExample: run a pipeline, with an application named my_app. A step script:\necho \u0026quot;{{.cds.application | upper}}\u0026quot;  will display\nMY_APP  Helpers available and some examples:\n abbrev abbrevboth trunc trim upper: {{.cds.application | upper}} lower title untitle substr repeat trimall trimAll trimSuffix trimPrefix nospace initials randAlphaNum randAlpha randASCII randNumeric swapcase shuffle snakecase camelcase quote squote indent nindent replace plural toString default: {{.cds.application | default \u0026quot;\u0026quot;}}, {{.cds.application | default \u0026quot;defaultValue\u0026quot;}} empty coalesce toJSON toPrettyJSON b64enc b64dec escape : replace \u0026lsquo;_\u0026lsquo;, \u0026lsquo;/\u0026rsquo;, \u0026lsquo;.\u0026rsquo; by \u0026lsquo;-\u0026rsquo;  You\u0026rsquo;re a go developper? See all helpers on https://github.com/ovh/cds/blob/master/sdk/interpolate/interpolate_helper.go#L23\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/",
	"title": "Worker Model",
	"tags": [],
	"description": "",
	"content": " Purpose The goal of CDS is to start a worker when you need it, which should match all your requirements exactly. In order to scale automatically on demand, it is possible to register a worker model.\nThe goal of a worker model is to describe the capabilities of a given docker/iso image in terms of architecture, pre-installed binaries or libraries.\nTypes There are 2 types of worker models:\n Docker images, see how to create a worker model docker Openstack images, see how to create a worker model openstack  Behavior All registered CDS hatcheries start/kill workers as needed.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/",
	"title": "Actions",
	"tags": [],
	"description": "",
	"content": "Within a Job, each step is based on an action.\nThere are three types of actions:\n Built-in actions, available on each CDS Installation User actions, added by CDS Administrators for now Plugins actions, added by CDS Administrators  "
},
{
	"uri": "https://ovh.github.io/cds/introduction/scopes/application/",
	"title": "Application",
	"tags": [],
	"description": "",
	"content": " Application An application represents a real world production unit. An application lives inside a project, has variables and can be attached to a CDS Workflow.\n"
},
{
	"uri": "https://ovh.github.io/cds/hosting/repositories-manager/bitbucket/",
	"title": "Bitbucket",
	"tags": [],
	"description": "",
	"content": " Authorize CDS on your Bitbucket instance You need to perform the following steps :\n Bitbucket admin privileges A RSA Key Pair  Generate RSA Key Pair Create the private RSA certificate:\n$ openssl genrsa -out key.pem 1024  The content of key.pem have to be used as privateKey below in CDS Configuration file.\nGenerate the public RSA certificate:\n$ openssl rsa -in key.pem -pubout  This will display the public key, you will have to copy-paste it inside Public Key field on Bitbucket.\nCreate a CDS application in BitBucket In Bitbucket go to Administration Settings / Application Links. Create a new Application with :\n Name : CDS Type : Generic Application Application URL : Your CDS URL Display URL : Your CDS URL  On this application, you just have to set up OAuth Incoming Authentication :\n Consumer Key : CDS (you can change it in your configuration file) Consumer Name : CDS Public Key : Your CDS RSA public key Consumer Callback URL : None Allow 2-Legged OAuth : false Execute as : None Allow user impersonation through 2-Legged OAuth : false  Complete CDS Configuration File Set value to privateKey. You can modify consumerKey if you want.\n[vcs.servers] [vcs.servers.Bitbucket] # URL of this VCS Server url = \u0026quot;https://mybitbucket.localhost\u0026quot; [vcs.servers.Bitbucket.bitbucket] # you can change the consumeKey if you want consumerKey = \u0026quot;CDS\u0026quot; # Does polling is supported by VCS Server disablePolling = false # Does webhooks are supported by VCS Server disableWebHooks = false privateKey = \u0026quot;-----BEGIN PRIVATE KEY-----\\n....\\n-----END PRIVATE KEY-----\u0026quot; [vcs.servers.Bitbucket.bitbucket.Status] # Set to true if you don't want CDS to push statuses on the VCS server # disable = false  You can configure many instances of Bitbucket:\n[vcs.servers] [vcs.servers.mybitbucket_instance1] # URL of this VCS Server url = \u0026quot;https://mybitbucket-instance1.localhost\u0026quot; [vcs.servers.mybitbucket_instance1.bitbucket] consumerKey = \u0026quot;CDS_Instance1\u0026quot; # Does polling is supported by VCS Server disablePolling = true # Does webhooks are supported by VCS Server disableWebHooks = false # Does webhooks creation are supported by VCS Server disableWebHooksCreation = false privateKey = \u0026quot;-----BEGIN PRIVATE KEY-----\\n....\\n-----END PRIVATE KEY-----\u0026quot; [vcs.servers.mybitbucket_instance1.bitbucket.Status] # Set to true if you don't want CDS to push statuses on the VCS server disable = false # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server showDetail = true [vcs.servers.mybitbucket_instance2] # URL of this VCS Server url = \u0026quot;https://mybitbucket-instance2.localhost\u0026quot; [vcs.servers.mybitbucket_instance2.bitbucket] consumerKey = \u0026quot;CDS_Instance2\u0026quot; # Does polling is supported by VCS Server disablePolling = true # Does webhooks are supported by VCS Server disableWebHooks = false # Does webhooks creation are supported by VCS Server disableWebHooksCreation = false privateKey = \u0026quot;-----BEGIN PRIVATE KEY-----\\n....\\n-----END PRIVATE KEY-----\u0026quot; [vcs.servers.mybitbucket_instance2.bitbucket.Status] # Set to true if you don't want CDS to push statuses on the VCS server disable = false # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server showDetail = true  Then restart CDS\nSee how to generate Configuration File\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/",
	"title": "Building Pipelines",
	"tags": [],
	"description": "",
	"content": "  Variables Actions Job\u0026#39;s Requirements  "
},
{
	"uri": "https://ovh.github.io/cds/hosting/repositories-manager/gitlab/",
	"title": "Gitlab",
	"tags": [],
	"description": "",
	"content": " Authorize CDS on your Gitlab instance What you need to perform the following steps :\n Gitlab admin privileges  Create a CDS application on Gitlab In Gitlab go to Settings / Application section. Create a new application with :\n Name : CDS Redirect URI : https://your-cds-api/repositories_manager/oauth2/callback  Scopes :\n API read_user read_registry  Complete CDS Configuration File Set value to appId and secret\n[vcs.servers.Gitlab] # URL of this VCS Server url = \u0026quot;https://gitlab.com\u0026quot; [vcs.servers.Gitlab.gitlab] appId = \u0026quot;xxxx\u0026quot; # Does polling is supported by VCS Server disablePolling = false # Does webhooks are supported by VCS Server disableWebHooks = false secret = \u0026quot;xxxx\u0026quot; [vcs.servers.Gitlab.gitlab.Status] # Set to true if you don't want CDS to push statuses on the VCS server disable = false # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server showDetail = true  Then restart CDS\nSee how to generate Configuration File\n"
},
{
	"uri": "https://ovh.github.io/cds/hatchery/kubernetes/",
	"title": "Hatchery Kubernetes",
	"tags": [],
	"description": "",
	"content": " Start Kubernetes hatchery Generate a token for group:\n$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Edit the CDS Configuration or set the dedicated environment variables. To enable the hatchery, just set the API HTTP and GRPC URL, the token freshly generated.\nThen start hatchery:\nengine start hatchery:kubernetes --config config.toml  This hatchery will spawn Pods on Kubernetes in the default namespace or the specified namespace in your config.toml. Each pods is a CDS Worker, using the Worker Model of type \u0026lsquo;docker\u0026rsquo;.\n"
},
{
	"uri": "https://ovh.github.io/cds/hatchery/marathon/",
	"title": "Hatchery Marathon",
	"tags": [],
	"description": "",
	"content": " Start Marathon hatchery Generate a token for group:\n$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Edit the CDS Configuration or set the dedicated environment variables. To enable the hatchery, just set the API HTTP and GRPC URL, the token freshly generated.\nThen start hatchery:\nengine start hatchery:marathon --config config.toml  This hatchery will spawn Application on Marathon. Each application is a CDS Worker, using the Worker Model of type \u0026lsquo;docker\u0026rsquo;.\n"
},
{
	"uri": "https://ovh.github.io/cds/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " What is CDS? Enterprise-Grade Continuous Delivery \u0026amp; DevOps Automation Open Source Platform\n Easy to deploy Cloud native Scalable \u0026amp; Extensible Infrastructure \u0026amp; Architecture agnostic Event-Driven Pipeline  Designed for scalability, CDS tasks can run either on cloud infrastructure or on your own machines, should you start some workers using a hatchery.\nCDS exposes an API available to workers and humans through CLI or WebUI.\nWhat does CDS do? Basically, CDS allows users to create building and delivery pipelines for all your applications. An application is composed of one or multiple pipelines, that can be triggered:\n manually by VCS change by another pipeline by a hook  General  Creation of build and deployment pipelines Simple organisation by projects and applications Artifact storage available trough UI, API and CLI Reusable build and deployment Actions  Packaging  Declaration of worker models (specific hosts, docker image, OpenStack recipe) Conditional build path depending on build parameters (ie: git branch)  Deployment  Completely cross platform workers (built in Go) without any dependency Support for deployment environments (different sets of variables for the same deployment pipeline)  Basic principles  An action will start on any worker matching all its requirements Every action runs in a different worker, all build data needed for the next step should be uploaded as artifact It is possible to run some of your pipelines on-premise, some on CDS workers  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/payload/",
	"title": "Payload",
	"tags": [],
	"description": "",
	"content": " A CDS Workflow can be launched :\n manually, user can enter a Payload by webhooks / repository webhooks, payload contains the value sent by initiator of the hook scheduler, the payload contains the value of the default payload. You can edit the default payload on the root pipeline (on roadmap) listener, as a kafka listener. The payload will contain the content of the kafka message  A payload is a JSON value. You can use it inside your CDS Jobs.\nExample:\n{ \u0026quot;akey\u0026quot;: \u0026quot;valueOfKey\u0026quot;, \u0026quot;subkey\u0026quot;: { \u0026quot;akey\u0026quot;: \u0026quot;value\u0026quot; } }  Two variables are available inside your jobs:\n{{.akey}}  and\n{{.subkey.akey}}  Choose a git branch in the payload On a git.branch attribute, you can choose a git branch if you attach on the pipeline context an application linked to a Git Repository.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/plugins/",
	"title": "Plugins Actions",
	"tags": [],
	"description": "",
	"content": "CDS Plugin System lets users develop complex actions. See How to write a plugin\nCDS Administrators have to import plugins on CDS to let user use them.\nPlugins from CDS Contributions:\n Write a Plugin plugin-download plugin-group-tmpl plugin-kafka-publish plugin-marathon plugin-ssh-cmd plugin-tmpl plugin-venom  "
},
{
	"uri": "https://ovh.github.io/cds/hosting/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " CDS API is the core component of CDS. To start CDS api, the only mandatory dependency is a PostgreSQL database and a path to the directory containing other CDS binaries.\nThere is are two ways to set up CDS:\n as toml configuration over environment variables.  CDS API Third-parties At the minimum, CDS needs a PostgreSQL Database \u0026gt;= 9.4 and Redis \u0026gt;= 3.2. But for serious usage your may need :\n A Redis server or sentinels based cluster used as a cache and session store A LDAP Server for authentication A SMTP Server for mails A Kafka Broker to manage CDS events A Openstack Swift Tenant to store builds artifacts A Vault server for CDS configuration A Consul to manage CDS Configuration  See Configuration template for more details\nSupported Platforms  FreeBSD i386/amd64/arm Linux i386/amd64/arm(raspberry pi) Windows/amd64 Darwin i386/amd64 OpenBSD amd64 Solaris amd64  You\u0026rsquo;ll find binaries for Linux amd64/arm, Windows amd64, Darwin amd64 and FreeBSD amd64 on CDS Releases\n"
},
{
	"uri": "https://ovh.github.io/cds/hosting/ready-to-run/from-binaries/",
	"title": "Run with binaries",
	"tags": [],
	"description": "",
	"content": " Run from binaries This article contains the steps to start CDS locally, with API, UI and a local Hatchery.\n Download CDS from Github Prepare Database Launch CDS API, CDS UI and a Local Hatchery  Prerequisite  a redis a postgresql 9.4 min  Get latest release from Github mkdir $HOME/cds cd cds LAST_RELEASE=$(curl -s https://api.github.com/repos/ovh/cds/releases | grep tag_name | head -n 1 | cut -d '\u0026quot;' -f 4) OS=linux # could be linux, darwin, windows ARCH=amd64 # could be 386, arm, amd64 # GET Binaries from github wget https://github.com/ovh/cds/releases/download/$LAST_RELEASE/cds-engine-$OS-$ARCH wget https://github.com/ovh/cds/releases/download/$LAST_RELEASE/cds-worker-$OS-$ARCH wget https://github.com/ovh/cds/releases/download/$LAST_RELEASE/cdsctl-$OS-$ARCH wget https://github.com/ovh/cds/releases/download/$LAST_RELEASE/ui.tar.gz wget https://github.com/ovh/cds/releases/download/$LAST_RELEASE/sql.tar.gz chmod +x *-$OS-$ARCH  Prepare Database For this example, we consider that the database is installed on localhost, port 5432, with an existing empty database and user named cds and a password \u0026lsquo;cds\u0026rsquo;.\ncd $HOME/cds tar xzf sql.tar.gz ./cds-engine-linux-amd64 database upgrade --db-host localhost --db-user cds --db-password cds --db-name cds --db-sslmode disable --db-port 5432 --migrate-dir sql  Launch CDS API Generate a Configuration File\ncd $HOME/cds ./cds-engine-linux-amd64 config new \u0026gt; $HOME/cds/conf.toml ./cds-engine-linux-amd64 start api --config $HOME/cds/conf.toml  Check that CDS is up and running:\ncurl http://localhost:8081/mon/version curl http://localhost:8081/mon/status  Launch CDS UI cd $HOME/cds tar xzf ui.tar.gz # this command generates a $HOME/cds/dist/ directory  The dist/ directory contains all HTML, Javascript, css\u0026hellip; files.\nYou can serve theses files with a simple web server, but there is a ready-to-run Caddyfile to launch CDS UI quickly.\ncd dist/ # BACKEND_HOST contains a url to CDS Engine export BACKEND_HOST=\u0026quot;http://localhost:8081\u0026quot; # if you expose CDS on a domain as https://your-domain/your-cds, enter \u0026quot;/your-cds\u0026quot; BASE_URL=\u0026quot;/\u0026quot; sed -i \u0026quot;s#base href=\\\u0026quot;/\\\u0026quot;#base href=\\\u0026quot;${BASE_URL}\\\u0026quot;#g\u0026quot; index.html # Get Caddy wget https://github.com/ovh/cds/releases/download/0.8.0/caddy-linux-amd64 chmod +x caddy-linux-amd64 # RUN CDS UI ./caddy-linux-amd64  Then, open a browser on http://localhost:2015/\nLaunch CDS Local Hatchery The previously generated configuration file contains all CDS configuration.\nTo be able to start a local hatchery, enter a hatchery name in the section hatchery.local.commonConfiguration\n... [hatchery.local] # BaseDir for worker workspace basedir = \u0026quot;/tmp\u0026quot; # Nb Workers to provision nbProvision = 1 [hatchery.local.commonConfiguration] # Name of Hatchery name = \u0026quot;my-local-hatchery\u0026quot; ...  Then, start the local hatchery\n./cds-engine-linux-amd64 start hatchery:local --config $HOME/cds/conf.toml # notice that you can run api and hatchery with a one common only: # ./cds-engine-linux-amd64 start api hatchery:local --config $HOME/cds/conf.toml  Go further  How to use Openstack infrastructure to spawn CDS container read more Link CDS to a repository manager, as Github, Bitbucket Server or Gitlab read more Learn more about CDS variables read more  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/requirements/service/example-pg/",
	"title": "Service Requirement PostgreSQL",
	"tags": [],
	"description": "",
	"content": " Add the service requirement Requirement Service\n Type: service Hostname: mypg. This will be the service hostname Docker Image: postgres:9.5.3. This is the name of docker image to link to current job Options:  POSTGRES_USER=myuser POSTGRES_PASSWORD=mypassword  And a requirement model which allow you to execute apt-get install -y postgresql-client, see HowTo\nAdd a step of type script docker image postgres:9.5.3 start a postgresql at startup. So, it\u0026rsquo;s now available on mypg\n#!/bin/bash set -ex apt-get update apt-get install -y postgresql-client PGPASSWORD=mypassword psql -U myuser -h mypg \u0026lt;\u0026lt;EOF \\x SELECT version(); EOF  Execute Pipeline\nSee output:\n"
},
{
	"uri": "https://ovh.github.io/cds/introduction/concepts/stage/",
	"title": "Stage",
	"tags": [],
	"description": "",
	"content": "Usually in CDS a build pipeline is structured of the following stages :\n Compile stage : Build the binaries Analysis \u0026amp; Unit Tests stage : Run all unit tests and analyse code quality Packaging stage : Build the final package, Virtual Machine Image or Docker Image.  In CDS, stages are executed sequentially if the previous stage is successful.\nYou can define trigger conditions on a stage, to enable/disable it under given conditions. For instance, you may want to run the Compile Stage and Analysis \u0026amp; Unit Tests stage on all branches but dedicate the Packaging Stage run on master and develop branches only.\nA Stage is a set of jobs which will be run in parallel.\n"
},
{
	"uri": "https://ovh.github.io/cds/worker/update/",
	"title": "Update your worker",
	"tags": [],
	"description": "",
	"content": " Manual Update If you run manually a worker, you problably want to update it when CDS Engine is updated with a new Release.\nUpdate your worker from CDS API:\n./worker update --api https://your.cds.instance  Update your worker from latest Release from Github:\n./worker update --from-github  Auto Update If you use a dedicated worker, you launch it with the command:\n./worker --api https://your.cds.instance  You can add auto-update flag, to auto update the worker, without restart it.\n./worker --api https://your.cds.instance --auto-update  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/hooks/webhook/",
	"title": "Webhook",
	"tags": [],
	"description": "",
	"content": "On a Root Pipeline, you can add a \u0026ldquo;Webhook\u0026rdquo;. Click on the created icon to get the WebHook URL.\nIn order to trigger this one you just have to make a HTTP call on the given url with the selected method. If the selected method is POST you can also send a payload from your workflow inside the request body or if you use GET method you can write your payload using query parameters.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/docker/docker-customized/",
	"title": "Worker Model with your own image",
	"tags": [],
	"description": "",
	"content": " A worker model of type docker can be spawned by a Hatchery Docker Swarm\nSetup Docker Worker Model with your own image In this example, we will build a Docker model able to build an AngularJs application with webfonts. To create webfonts, a grunt task (optionnally) requires fontforge and ttfautohint.\nThe following tools must be included in the model:\n NodeJs and npm bower grunt-cli gulp-cli fontforge ttfautohint  We will use the official nodejs image from Docker. In this image, there is already a user named node. For the example, we will compile ttfautohint.\nPrerequisite To build a Docker model, you need:\n your favorite text editor a sane installation of Docker https://docs.docker.com/engine/installation/  Dockerfile Copy this content in a file named Dockerfile\n# User official nodejs docker image FROM node:6.10.1 #Answer 'yes' to each question ENV DEBIAN_FRONTEND noninteractive # Upgrade the debian packages RUN (apt-get update \u0026amp;\u0026amp; apt-get upgrade -y -q \u0026amp;\u0026amp; apt-get -y -q autoclean \u0026amp;\u0026amp; apt-get -y -q autoremove) #The official image comes with npm; so we can use it to install some packages RUN npm install -g grunt-cli gulp-cli bower # Install fontforge for our specific need RUN apt-get install -y fontforge # Install packages and compile ttfautohint (still for our specific need) RUN apt-get install -y libharfbuzz-dev libfreetype6-dev libqt4-dev\\ \u0026amp;\u0026amp; cd /tmp \\ \u0026amp;\u0026amp; curl -L http://download.savannah.gnu.org/releases/freetype/ttfautohint-1.6.tar.gz |tar xz\\ \u0026amp;\u0026amp; cd ttfautohint-1.6\\ \u0026amp;\u0026amp; ./configure\\ \u0026amp;\u0026amp; make\\ \u0026amp;\u0026amp; make install # Change user. If you do not specify this command, the user will be root, and in our case, # bower will shout as it cannot be launched by root USER node # Specify a working directory on which the current user has write access # Remember, a curl command will be, first, executed to download the worker WORKDIR /home/node  Build it and push it from you shell, type the following command to build the Docker image:\ndocker build --no-cache --pull -t registry.my.infra.net/my/beautiful/worker:latest .  If you want to test it, you can lauch your docker in bash mode :\ndocker run -it registry.my.infra.net/my/beautiful/worker:latest /bin/bash pwd fontforge -v exit  Now push it\ndocker push registry.my.infra.net/my/beautiful/worker:latest  Register your model in CDS  In the UI, click on the wheel on the hand right top corner and select *workers\u0026rdquo; (or go the the route #/worker) At the bottom of the page, fill the form  Name of your worker My Beautiful type docker image registry.my.infra.net/my/beautiful/worker:latest  Click on Add button and that\u0026rsquo;s it  Now you can specify this model in prerequisite on your job. Create a new prerequisite of type \u0026ldquo;model\u0026rdquo;, then choose your worker model in list\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/",
	"title": "Building CDS Workflows",
	"tags": [],
	"description": "",
	"content": " A CDS Workflow is composed of pipelines and can use some features as join, hooks, mutex, payload\u0026hellip; You can create a CDS Workflow with the web UI, you can also create a workflow with the command line cdsctl.\nA pipeline is composed of stages and jobs. You can create a pipeline with the web UI or you can import it with cdsctl.\nUse cdsctl  cdsctl workflow import cdsctl workflow export cdsctl workflow pull cdsctl workflow push cdsctl pipeline import cdsctl pipeline export  Use CDS WEB UI  Design your Workflow Building Pipelines  "
},
{
	"uri": "https://ovh.github.io/cds/hosting/download/",
	"title": "Download",
	"tags": [],
	"description": "",
	"content": " You\u0026rsquo;ll find the lastest release of CDS on Github Releases\nCDS Worker CDS Worker Documentation\n   OS 386 amd64 arm     darwin      freebsd      linux      windows       CDSCTL cdsctl Documentation\n   OS 386 amd64 arm     darwin      freebsd      linux      windows       CDS Engine CDS Engine Documentation\n   OS 386 amd64 arm     darwin      freebsd      linux      windows       "
},
{
	"uri": "https://ovh.github.io/cds/introduction/scopes/environment/",
	"title": "Environment",
	"tags": [],
	"description": "",
	"content": " Environment An environment is created inside a project and can be used by all the applications of that project.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/hooks/git-poller/",
	"title": "Git Poller hook",
	"tags": [],
	"description": "",
	"content": "You want to run a workflow after a git push on a repository BUT your CDS instance isn\u0026rsquo;t accessible from the internet ? This kind of hook is for you. (If your CDS instance is accessible from the internet please check the Git Repository Webhook).\nThis kind of hook will poll periodically the Github API to know the push and pull-request events on your repository.\nYou have to:\n link your project to a Repository Manager, on Advanced Section. See how to setup repository manager on your CDS instance. link an application to a git repository add a Git Poller on the root pipeline, this pipeline have the application linked in the context  For now, only Github are supported for git poller by CDS.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/hooks/git-repo-webhook/",
	"title": "Git Repository Webhook",
	"tags": [],
	"description": "",
	"content": "You want to run a workflow after a git push on a repository? This kind of hook is for you.\nYou have to:\n link your project to a Repository Manager, on Advanced Section. See how to setup repository manager on your CDS instance. link an application to a git repository add a Repository Webhook on the root pipeline, this pipeline have the application linked in the context  Github / Bitbucket \u0026amp; Gitlab are supported by CDS.\n"
},
{
	"uri": "https://ovh.github.io/cds/hatchery/openstack/",
	"title": "Hatchery Openstack",
	"tags": [],
	"description": "",
	"content": " CDS build using Openstack infrastructure to spawn each CDS Workers inside dedicated virtual machine.\nStart Opentack hatchery Generate a token for group:\n$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Edit the CDS configuration or set the dedicated environment variables. To enable the hatchery, just set the API HTTP and GRPC URL, the token freshly generated and the openstack variables.\nThen start hatchery:\nengine start hatchery:openstack --config config.toml  This hatchery will now start worker of model \u0026lsquo;openstack\u0026rsquo; on Openstack infrastructure.\nSetup a worker model See Tutorial\n"
},
{
	"uri": "https://ovh.github.io/cds/introduction/concepts/job/",
	"title": "Job",
	"tags": [],
	"description": "",
	"content": "A Job is an important concept in CDS. A job is composed of steps which will be run sequentially. A Job is executed in a dedicated workspace and each new run of a job will have a new dedicated workspace. This means that you cannot share a workspace between jobs or between two runs of the same job.\nA Job is executed by a worker. CDS will select or provision a worker for the job dependending on the Requirements the job\u0026rsquo;s requirements.\nIf you want to share files or artifacts between jobs, stages or pipelines you have to use the Artifact upload and Artifact download steps. You can also share variables between stages, see variables tutorial for more details.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/requirements/",
	"title": "Job&#39;s Requirements",
	"tags": [],
	"description": "",
	"content": " Type of requirements:\n Binary Model Hostname Network access Service Memory OS \u0026amp; Architecture  A Job will be executed by a worker.\nCDS will choose and provision a worker for dependending on the requirements you define on your job.\nYou can set as many requirements as you want, following these rules:\n Only one model can be set as requirement Only one hostname can be set as requirement Only one OS \u0026amp; Architecture requirement can be set as at a time Memory and Services requirements are availabe only on Docker models  Note on Service Requirement A Service in CDS is a docker container which is linked with your base image. To summarize, if you add mysql as service requirement to your pipeline job, the required image will then be used to create a container that is linked to the build container.\nHow to When editing a pipeline job, choose your model as usual, then add a new service requirement, the name you set will be the service\u0026rsquo;s hostname, set the docker image for the service as the value.\nWhen the pipeline will be triggered, a worker defined by the model will be spawned with a docker link to the service you defined as requirement.\nEnvironment variables You can defined environment variables of the service by setting requirement value as :\nregistry.ovh.net/official/postgres:9.5.3 POSTGRES_USER=myuser POSTGRES_PASSWORD=mypassword  To define your job\u0026rsquo;s requirements in the UI, you just have to go on the job\u0026rsquo;s edition page and click on requirements :\nThen a modal will appear in order to select your requirements :\nTutorials  Tutorial - Service Link Requirement Nginx Tutorial - Service Link Requirement PostgreSQL  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/hooks/kafka-hook/",
	"title": "Kafka hook",
	"tags": [],
	"description": "",
	"content": " You want to run a workflow from a kafka message? This kind of hook is for you.\nThis kind of hook will connect to a kafka topic and consume message. For each message, it will trigger your workflow.\nThe kafka message have to be a JSON message, it in will be used as a payload for your workflow See playload documentation.\nHow to use it Link your project to a Kafka platform On your CDS Project, select the platforms section then add a Kafka platform.\nAdd a Kafka hook on the root pipeline of your workflow Click on the pipeline root of a workflow, then choose \u0026lsquo;Add a Hook\u0026rsquo; on the sidebar\nSelect the Kafka Hook and complete the information:\n The Consumer group Select the kafka platform The kafka topic to read  Add run condition The workflow will be triggered for all message received in kafka queue.\nIf you don\u0026rsquo;t want to launch the root pipeline for each message, you can add a run condition.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/openstack/",
	"title": "Openstack Worker Model",
	"tags": [],
	"description": "",
	"content": " CDS build using OVH.com Openstack infrastructure\nCreate Openstack user In OVH manager, in cloud section, click on the menu on the Servers\u0026gt;Openstack item.\nYou will be able to create a worker model Openstack user, enter description (name and password will be generated).\nAdd Openstack worker model We need to define an Openstack worker model to have Openstack hatchery booting workers.\nWe will create a model called docker:\n With low hardware capacity (vps-ssd-1) On Debian 8 With docker ready to use Git installed  First, define a udata file. It is a shell script executed just after the boot sequence complete. Our docker udata will look like this:\n# Install docker cd $HOME apt-get -y --force-yes update \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get install -y --force-yes apt-transport-https ca-certificates \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D mkdir -p /etc/apt/sources.list.d sh -c \u0026quot;echo deb https://apt.dockerproject.org/repo debian-jessie main \u0026gt; /etc/apt/sources.list.d/docker.list\u0026quot; apt-get -y --force-yes update \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-cache policy docker-engine \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get install -y --force-yes docker-engine \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 service docker start \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 # Non-root access groupadd docker \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 gpasswd -a ${USER} docker \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 service docker restart \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 # Basic build binaries apt-get -y --force-yes install curl git \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get -y --force-yes install binutils \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1  Last step, define worker model in cds via CLI:\n$ cdsctl worker model add docker openstack myGroupName --image=\u0026quot;Debian 8\u0026quot; --flavor=\u0026quot;vps-ssd-1\u0026quot; --userdata=\u0026quot;./docker.udata\u0026quot;  Or via UI (inside settings section \u0026ndash;\u0026gt; worker models):\nAttention in the UI for an Openstack worker model you have to put in the image input a valid JSON with the name of your image (inside OS field), and inside the user_data your specific script like above but manually encoded in base64.\nFor example:\n"
},
{
	"uri": "https://ovh.github.io/cds/introduction/scopes/permissions/",
	"title": "Permissions",
	"tags": [],
	"description": "",
	"content": " In CDS, there are 3 types of permissions:\n Read Read / Execute Read / Write / Execute  These permissions can be attached to different objects:\n On project On application On environment On pipeline On workflow  In CDS, permissions cannot be attached directly to users. Permissions need to be attached to groups of users. Users inherit their permissions from the groups they are belonging to.\nExample usage: Enforce a strict separation of duties by allowing a group of people to view/inspect a workflow, a second group will be able to push it to a staging environment and a third group will be allowed to push it to a production environment. You can have a fourth group responsible of editing the workflow if needed.\nA more common scenario consists in giving Read / Execute permissions on the staging environment to everyone in your development team while restricting the production deployments and the pipeline edition to a smaller group of users.\nWarning: when you add a new group permission on a workflow scope, make sure to give the permission on all linked scopes (project, environments, applications, pipelines).\nTokens A group permission is also attached to CLI, workers, worker models, hatchery and all different services in CDS.\nWhen using the CDS CLI in a script, instead of providing your own passwords, you want to generate and use an CLI authentication token. Similarly, when you start a hatchery you will need an authentication token to contact the CDS API.\nThe cdsctl group token command allows to list, generate and remove tokens linked to a group permission (documentation available here). Alternatively, you can do it via the user interface in the group administration view.\nClick on the Groups entry in the menu And then in the group edition view, you can manage all your generated tokens for this group and generate new ones. If you want to list all the tokens that you can use go to your profile page and you will find a list of all the tokens associated to your groups.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/pipeline-context/",
	"title": "Pipeline Context",
	"tags": [],
	"description": "",
	"content": "After adding the pipeline, you can \u0026ldquo;Edit the pipeline Context\u0026rdquo; (sidebar).\nThen, you can:\n add or remove application. Jobs can use cds.app.* configuration and or remove an environment. Jobs can use cds.env.* configuration enable / disable Pipeline Mutex  "
},
{
	"uri": "https://ovh.github.io/cds/hatchery/swarm/",
	"title": "Hatchery Swarm",
	"tags": [],
	"description": "",
	"content": " CDS build using Docker Swarm to spawn CDS Worker.\nStart Swarm hatchery Generate a token for group:\n$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Edit the CDS configuration or set the dedicated environment variables. To enable the hactchery, just set the API HTTP and GRPC URL, the token freshly generated.\nThis hatchery use the standard docker environment variables to connect to a docker host.\nThen start hatchery:\nexport DOCKER_HOST=tcp://xx.xx.xx.xx:2375 engine start hatchery:swarm --config config.toml  This hatchery will now start worker of model \u0026lsquo;docker\u0026rsquo; on you docker installation.\nSetup a worker model See Tutorial\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/hooks/",
	"title": "Hooks",
	"tags": [],
	"description": "",
	"content": "If you want to trigger the run of your workflow you need some hooks on your root pipeline inside the workflow.\nOn the root pipeline only, you can add hooks:\n webhook scheduler repository webhooks git poller kafka hook  There are two hooks on this pipeline, a repository webhook (Github here) and a webhook:\n"
},
{
	"uri": "https://ovh.github.io/cds/hosting/ready-to-run/",
	"title": "Ready to RUN",
	"tags": [],
	"description": "",
	"content": "  Docker Compose Run with binaries  "
},
{
	"uri": "https://ovh.github.io/cds/introduction/concepts/step/",
	"title": "Step",
	"tags": [],
	"description": "",
	"content": "The steps of a job is the list of the different operations performed by the CDS worker. Each step is based on an Action pre-defined by CDS. The list of all actions is defined on *\u0026lt;your cds url ui\u0026gt;/#/action*. When a step fails, its parent job is stopped and marked as failed.\nYou can define a Step as final. It mean that even if the job fails before reaching it, the step will be executed anyway. The final steps are executed after all other steps.\nYou can find below an example of steps creation in CDS. You have 2 configuration flags:\n Optional : The failure of the step does not cause the failure of the whole job. Always executed : with this flag checked, this step will be executed even if previous steps fail. This can be helpful, for example, if you run tests in a step and you would like to upload the tests report even if the tests fail.  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/requirements/worker-model/vsphere/",
	"title": "VSphere Worker Model",
	"tags": [],
	"description": "",
	"content": " CDS build using VSphere infrastructure\nAdd VSphere worker model We need to define a VSphere worker model to have VSphere hatchery booting workers.\nWe will create a worker model called debian8-docker:\n On Debian 8 With docker ready to use Git installed  First, define a udata file. It is a shell script executed just after the boot sequence complete. Our udata will look like this:\n# Install docker cd $HOME apt-get -y --force-yes update \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get install -y --force-yes apt-transport-https ca-certificates \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D mkdir -p /etc/apt/sources.list.d sh -c \u0026quot;echo deb https://apt.dockerproject.org/repo debian-jessie main \u0026gt; /etc/apt/sources.list.d/docker.list\u0026quot; apt-get -y --force-yes update \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-cache policy docker-engine \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get install -y --force-yes docker-engine \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 service docker start \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 # Non-root access groupadd docker \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 gpasswd -a ${USER} docker \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 service docker restart \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 # Basic build binaries apt-get -y --force-yes install curl git \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get -y --force-yes install binutils \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1  Last step, define worker model in cds:\n$ cds worker model add debian8-docker vsphere --image=\u0026quot;debian8\u0026quot; --userdata=\u0026quot;./yourscript.sh\u0026quot;  --image is the name of your virtual machine that you have created before on your host to clone (See Advanced)\n"
},
{
	"uri": "https://ovh.github.io/cds/worker/",
	"title": "Worker",
	"tags": [],
	"description": "",
	"content": " A pipeline is structured in sequential stages containing one or multiple concurrent jobs. A Job will be executed by a worker.\nWhat is a worker Basically, a worker is a binary. This binary can be launched inside a Docker Container, or on a Host (as an Openstack VM). A worker executes a CDS Job.\nIf you want to auto-scale workers, have a look at the CDS Hatchery\nWorker life cycle If the worker is spawned by a Hatchery, the Docker Container or Host where the worker will be lauched must contain a sane installation of \u0026ldquo;curl\u0026rdquo;.\nSo, in the case of a worker model of type \u0026ldquo;docker\u0026rdquo;, the docker image must have curl available in the PATH.\nWhy would you need to setup your own worker ? There are several cases where one would need to setup his own worker:\n Perform incremental build Build on a specific architecture Perform integration tests in a specific network  Setup a worker\nAbout worker model Building your own worker model enables you to integrate your own tools, or to customize the tools you need to use. For instance, to build an AngularJs application, you shall need a worker capable of installing npm tools, importing bower packages (these are nodeJs tools), building webfonts with fontforge\u0026hellip;\nMore about worker model\n"
},
{
	"uri": "https://ovh.github.io/cds/hosting/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " The toml configuration can be provided by a file, via consul k/v store or via vault.\nStart CDS with local configuration file You can also generate a configuration file template with the following command.\n$ $PATH_TO_CDS/engine config new \u0026gt; my_conf_file.toml  Edit this file.\nCheck your configuration file with\n$ $PATH_TO_CDS/engine config check my_conf_file.toml Reading configuration file my_new_file.toml Configuration file OK  Create your database relations\n$ $PATH_TO_CDS/engine database upgrade --db-host \u0026lt;host\u0026gt; --db-port \u0026lt;port\u0026gt; --db-user \u0026lt;user\u0026gt; --db-password \u0026lt;password\u0026gt; --db-name \u0026lt;database\u0026gt; --migrate-dir $PATH_TO_CDS/engine/sql --limit 0  Run CDS\n$ $PATH_TO_CDS/engine start api --config my_conf_file.toml Reading configuration file my_new_file.toml 2017/04/04 16:33:17 [NOTICE] Starting CDS server... ...  Start CDS with Consul Upload your toml configuration to consul\n$ consul kv put cds/config.api.toml - \u0026lt;PASTE YOUR CONFIGURATION\u0026gt; \u0026lt;ENDS WITH CRTL-D\u0026gt; Success! Data written to: cds/config.api.toml  Run CDS\n$ $PATH_TO_CDS/engine start api --remote-config localhost:8500 --remote-config-key cds/config.api.toml Reading configuration from localhost:8500 2017/04/04 16:11:25 [NOTICE] Starting CDS server... ...  Start CDS with Vault You have to put your configuration in a TOML format like above with good values into a secret named /secret/cds/conf in your vault. For example if you use the vault CLI :\n$ myConfig=`cat conf.toml` $ vault write secret/cds/conf data=$myConfig  $ $PATH_TO_CDS/engine start api --vault-addr=http://myvault.com --vault-token=XXXX Reading configuration from vault @http://myvault.com 2017/04/04 16:33:17 [NOTICE] Starting CDS server...  "
},
{
	"uri": "https://ovh.github.io/cds/hatchery/",
	"title": "Hatchery",
	"tags": [],
	"description": "",
	"content": " Hatchery is a service dedicated to spawn and kill worker in accordance with build queue needs.\nAn hatchery is started with permissions to build all pipelines accessible from a given group, using token.\nThere are 6 modes for hatcheries:\n Local : Hatchery starts workers directly as local process. Marathon : Hatchery starts workers inside containers on a mesos cluster using Marathon API. Swarm : The hatchery connects to a Docker Swarm cluster and starts workers inside containers. Kubernetes : The hatchery connects to a Kubernetes cluster and starts workers inside containers. Openstack : Hatchery starts workers on Openstack virtual machines using Openstack Nova. VSphere : Hatchery starts workers on VSphere datacenter using VMWare VSphere.  Admin hatchery As a CDS administrator, it is possible to generate an access token for all projects using the shared.infra group.\nThis group is builtin to CDS, and all CDS administrators are administrator of this group.\nThis means that by default, an hatchery using a token generated for this group will be able to spawn workers able to build all pipelines.\n"
},
{
	"uri": "https://ovh.github.io/cds/hatchery/vsphere/",
	"title": "Hatchery Vsphere",
	"tags": [],
	"description": "",
	"content": " CDS build using VMWare Vsphere infrastructure to spawn each CDS Workers inside dedicated VM.\nPre-requisites This hatchery spawns VM which obtains IP from DHCP. So first you have to create a DHCP server on your host with NAT if you want to access to the internet. In order to create you have multiple possibilities like create your own VM with a DHCP server configured or if you are comfortable with the VMWare tools you can use the NSX system. This system will create DHCP gateway for you.\nAlso we recommend you to create a VM base that the hatchery will use to linked clone your new VM to execute your jobs. For example in our case we create different VM base with a minimal debian installed in different versions. In order to save your host resources we advice you to turn these VMs off.\nStart Vsphere hatchery Generate a token for group:\n$ cds generate token -g shared.infra -e persistent fc300aad48242d19e782a37d361dfa3e55868a629e52d7f6825c7ce65a72bf92  Edit the CDS configuration or set the dedicated environment variables. To enable the hatchery, just set the API HTTP and GRPC URL, the token freshly generated and the VSphere variables.\nThis hatchery will now start worker of model \u0026lsquo;vsphere\u0026rsquo; on Vsphere infrastructure.\nSetup a worker model See Tutorial\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/run-conditions/",
	"title": "Run conditions on pipeline",
	"tags": [],
	"description": "",
	"content": " In CDS if you want to launch a pipeline in your workflow only in specific cases you can add conditions on your pipeline in your workflow. For example if you want to run this pipeline automatically only if the value of git.branch is master.\nIf you want to edit your pipeline condition on the user interface you have to select a node under edition mode of your workflow and click on Edit run conditons like this :\nYou have 2 types of conditions:\nBasic run conditions With this type of conditions you can add multiple comparisons with a basic operators (=, !=, match for a regular expression, \u0026gt;=, \u0026gt;, \u0026lt;=, \u0026lt;). The variables syntax here are dotted syntax (example: cds.dest.application).\nIf you add multiple basic run conditions, all of these must be satisfied to run the pipeline. So with basic conditions you can\u0026rsquo;t make an OR between multiple conditions, it\u0026rsquo;s always an AND. If you want to make more specific or advanced run conditions you have to use the second type of conditions (advanced).\nAdvanced run conditions If you want some advanced run conditions like for example make some compute over specific variables and then compare their values you have the ability to use advanced run condtions. In fact, you are free to make any compute or comparison because advanced condition is a script that you write in Lua and MUST return a boolean (true if you want to run the pipeline or false if you don\u0026rsquo;t). In this case the variables syntax is in unix case (example: cds_dest_application) and prefixed with cds_, git_ or workflow_. In general rules when you have a CDS variable containing . or - you must replace with _. For example if you have a variable named cds.build.my-variable then in lua you have to use it with cds_build_my_variable.\nPay attention, all types of variables are string. Inside the Lua editor on CDS you have the autocompletion of your variables, you just have write cds_, git_ or workflow_ to see suggestions. Please be aware that you can\u0026rsquo;t have at the same time basic conditions and advanced conditions. The behavior when you have both is that ONLY advanced run conditions will be effective.\nFor example if you want to launch the pipeline if the value of cds_status is Success and git_branch is master OR if the value of cds_manual is true you have to write :\n-- Pay attention ! All variables value are string so you compare cds_manual with the string \u0026quot;true\u0026quot; and not true return cds_status == \u0026quot;Success\u0026quot; and (git_branch == \u0026quot;master\u0026quot; or cds_manual == \u0026quot;true\u0026quot;)  You can also use regular expression in your Lua condition, for instance:\n-- this example checks if current application beginning with 'abc' -- don't forget to import the regular expression module local re = require(\u0026quot;re\u0026quot;) return re.match(cds_application, \u0026quot;abc.*\u0026quot;) == cds_application  Functions re.find , re.gsub, re.match, re.gmatch are available. These functions have the same API as Lua pattern match. Under the hood, it uses the Go regexp package, so you can use regular expressions that are supported in the Go regexp package.\n"
},
{
	"uri": "https://ovh.github.io/cds/cli/",
	"title": "Command Line - REST API - SDK",
	"tags": [],
	"description": "",
	"content": "  REST API SDK Golang cdsctl engine worker  "
},
{
	"uri": "https://ovh.github.io/cds/hosting/database/",
	"title": "Database Management",
	"tags": [],
	"description": "",
	"content": " CDS provides all needed tools scripts to perform Schema creation and auto-migration. Those tools are embedded inside the engine binary.\nThe migration files are available to download on Github Releases and the archive is named sql.tar.gz. You have to download it and untar (tar xvzf sql.tar.gz).\nCreation On a brand new database run the following command:\n$ $PATH_TO_CDS/engine database upgrade --db-host \u0026lt;host\u0026gt; --db-port \u0026lt;port\u0026gt; --db-user \u0026lt;user\u0026gt; --db-password \u0026lt;password\u0026gt; --db-name \u0026lt;database\u0026gt; --migrate-dir $PATH_TO_CDS/engine/sql --limit 0  Upgrade On an existing database, run the following command on each CDS update:\n$ $PATH_TO_CDS/engine database upgrade --db-host \u0026lt;host\u0026gt; --db-port \u0026lt;port\u0026gt; --db-user \u0026lt;user\u0026gt; --db-password \u0026lt;password\u0026gt; --db-name \u0026lt;database\u0026gt; --migrate-dir $PATH_TO_CDS/engine/sql  More details Read more about CDS Database Management\n"
},
{
	"uri": "https://ovh.github.io/cds/hosting/",
	"title": "Hosting your own instance",
	"tags": [],
	"description": "",
	"content": " Introduction This section will help you to undestand how to start all the differents components of CDS: UI, API and the other µServices.\nPre-requisites You need:\n to download the latest release a properly formatted configuration file, a properly configured database, the desired third-parties up and running.  Engine startup The CDS engine is made of following components:\n API Hatcheries (local, docker, openstack, swarm, vshpere) Hooks  To start a services you just have to run $PATH_TO_CDS/engine start \u0026lt;service\u0026gt;.\nCaution: The API must always start first.\n$ engine start -h Start CDS Engine Services: * API: This is the core component of CDS. * Hatcheries: They are the components responsible for spawning workers. Supported platforms/orchestrators are: * Local machine * Openstack * Docker Swarm * Openstack * Vsphere * Hooks: This component operates CDS workflow hooks * VCS: This component operates CDS VCS connectivity Start all of this with a single command: $ engine start [api] [hatchery:local] [hatchery:marathon] [hatchery:openstack] [hatchery:swarm] [hatchery:vsphere] [hooks] [vcs] All the services are using the same configuration file format. You have to specify where the toml configuration is. It can be a local file, provided by consul or vault. You can also use or override toml file with environment variable. See $ engine config command for more details. Usage: engine start [flags] Flags: --config string config file --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default \u0026quot;cds/config.api.toml\u0026quot;) --vault-addr string (optional) Vault address to fetch secrets from vault (example: https://vault.mydomain.net:8200) --vault-token string (optional) Vault token to fetch secrets from vault  So it is possible to start all services as a single process $ engine start api hooks hatchery:local --config config.toml.\n$ engine start api hooks hatchery:local --config config.toml Reading configuration file config.toml Starting service api ... Starting service hooks ... Starting service vcs ... Starting service hatchery:local ...  For serious deployment, we strongly suggest to run each service as a dedicated process.\n$ engine start api --config config.toml $ engine start hooks --config config.toml $ engine start vcs --config config.toml $ engine start hatchery:local --config config.toml $ engine start hatchery:docker --config config.toml $ engine start hatchery:swarm --config config.toml $ engine start hatchery:marathon --config config.toml $ engine start hatchery:openstack --config config.toml $ engine start hatchery:vsphere --config config.toml  You can scale as you want each of this component, you probably will have to create a configuration for each instance of each service expect the API.\n$ engine config new \u0026gt; config.api.toml # All API instance can share the same configuration. $ cp config.api.toml config.hatchery.swarm-1.toml $ cp config.api.toml config.hatchery.swarm-2.toml $ cp config.api.toml config.hatchery.swarm-3.toml $ cp config.api.toml config.hooks.toml $ cp config.api.toml config.vcs.toml $ vi config.hatchery.local.toml # Edit the file an keep only the [logs] and [hatchery]/[hatchery.local] sections $ vi config.hatchery.docker.toml # Edit the file an keep only the [logs] and [hatchery]/[hatchery.docker] sections $ vi config.hatchery.swarm-1.toml # Edit the file an keep only the [logs] and [hatchery]/[hatchery.swarm] sections $ vi config.hatchery.swarm-2.toml # Edit the file an keep only the [logs] and [hatchery]/[hatchery.swarm] sections $ vi config.hatchery.swarm-3.toml # Edit the file an keep only the [logs] and [hatchery]/[hatchery.swarm] sections $ vi config.hooks.toml # Edit the file an keep only the [logs] and [hooks] sections $ vi config.vcs.toml # Edit the file an keep only the [logs] and [vcs] sections ...  If you decide to use consul or vault to store your configuration, you will have to use different key/secrets to store each piece of the configuration\nWeb UI Startup From the directory where you downloaded the release. Unarchive ui.tar.gz, it extract a dist directory. Download and install Caddy.\n$ export BACKEND_HOST=\u0026lt;your http(s) URL to CDS API\u0026gt; $ cd dist $ caddy  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/join/",
	"title": "Join",
	"tags": [],
	"description": "",
	"content": "A join lets workflow to wait the end of two or more parent pipelines.\nYou can trigger one or many pipelines after a join.\n"
},
{
	"uri": "https://ovh.github.io/cds/hatchery/update/",
	"title": "Update your hatchery",
	"tags": [],
	"description": "",
	"content": " Manual Update If you run manually a Hatchery, you problably want to update it when CDS Engine is updated with a new release.\nUpdate your hatchery from CDS API:\n./engine update --api https://your.cds.instance  Update your hatchery from latest Release from Github:\n./engine update --from-github  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/mutex/",
	"title": "Mutex",
	"tags": [],
	"description": "",
	"content": "By default, the same pipeline can run at the same time on multiple runs.\nIn a CDS Workflow, you can limit running a pipeline one at a time.\nClick on the pipeline → Edit the pipeline context → enable \u0026ldquo;Limit one run at run time\u0026rdquo;\nExample of use case: run an integration test once on a particular environment.\n"
},
{
	"uri": "https://ovh.github.io/cds/contribute/",
	"title": "Opensource / Contribute",
	"tags": [],
	"description": "",
	"content": " Roadmap See https://github.com/ovh/cds/blob/master/ROADMAP.md\nContact us  Benjamin COENEN - @BnJ25 François SAMIN - @francoissamin Steven GUIHEUX - @sguiheux Yvonnick ESNAULT - @yesnault  A remark / question / suggestion, feel free to join us on https://gitter.im/ovh-cds/Lobby\nAll CDS Contributors: https://github.com/ovh/cds/graphs/contributors\nFound a bug? Feel free to open an issue on https://github.com/ovh/cds/issues\nDocumentation Documentation https://ovh.github.io/cds is generated with Hugo. Source are under https://github.com/ovh/cds/tree/master/docs/content\nWrite / Generate / Test documentation  Download release Hugo v32.4 https://github.com/gohugoio/hugo/releases/tag/v0.32.4 - put hugo binary in your PATH Download CDS Binaries: cdsctl, engine, worker from https://github.com/ovh/cds/releases/latest Clone CDS repository: git clone https://github.com/ovh/cds.git inside ${CDS_SOURCES} Generate documentation with Hugo  cd ${CDS_SOURCES}/docs/content/cli rm -rf cdsctl engine worker; cd ${CDS_SOURCES} GEN_PATH=${CDS_SOURCES}/docs/content/cli make doc cd ${CDS_SOURCES}/docs hugo server   go to http://localhost:1313/cds/  Golang Development We use https://github.com/golang/dep to manage CDS Dependencies.\nIf you have to add or update a CDS Dependency, please follow instructions on https://github.com/golang/dep#adding-a-dependency\nAnd then launch:\n$ dep prune  "
},
{
	"uri": "https://ovh.github.io/cds/hosting/repositories-manager/",
	"title": "Repositories Manager",
	"tags": [],
	"description": "",
	"content": "CDS can be linked to following repositories manager :\n Bitbucket Server Github Gitlab  It allows you to enable some CDS features such as :\n Create application in CDS from Bitbucket or Github Attach an application to its Bitbucket or Github repository Fully automatic hook management Branch filtering on application workflows Commit logs on pipeline build details  Go through this tutorial to enable the link between repositories managers and CDS.\n"
},
{
	"uri": "https://ovh.github.io/cds/hatchery/create/",
	"title": "Write your own hatchery",
	"tags": [],
	"description": "",
	"content": " Example with a creation of a VSphere hatchery  First of all you need to create a new package like the other into the hatchery package. Let\u0026rsquo;s call this package vsphere for our example.\n You have to implement the Service interface (see here) in order to configure launch this new hatchery mode via CDS engine CLI.\n Your have to create a Configuration structure composed of the hatchery.CommonConfiguration and the variables you need to access to Vsphere API. You finally have to update the engine main.go file to manage this new service and add and manage the configuration structure as part of the global configuration.\n You need to implement the hatchery interface (see here)\n The Init function is useful to create the struct and to set all of these parameters, for our example it\u0026rsquo;s in this function that we\u0026rsquo;re going to create all our VSphere informations fetched from the VSphere API. (cf init.go). In this case we create a new vsphere client to request vsphere API, a new finder to fetch all informations about our vsphere host. In fact, all informations that we need to spawn and kill the vms with our workers inside on the vsphere infrastructure. This function is also used to create and register the hatchery on the api via the function in the sdk called hatchery.Register. This register will give you the id of your hatchery.\n The ID function returns the id of the current hatchery that comes from the hatchery client registered with the sdk previously in the Init function.\n The ModelType function returns the type of the hatchery, in this case it\u0026rsquo;s vsphere type. We can create a constant VSphere inside our sdk package.\n Hatchery function returns the hatchery struct initialised previously in the Init function.\n Client function returns the sdk client initialised previously in the Init function too.\n NeedRegistration is used to know if your worker model need registration. For example if a user update a worker model you have to rebuild the virtual machine model linked to this worker model. And this function returns true if the worker model was updated after the virtual machine model was created on vsphere. In order to know that for vsphere we have add some metadata on each vms in order to add more custom data as the last creation of this vm for example.\n WorkersStartedByModel returns all workers which are running with a worker model. In our vsphere example, in order to know that we register a string metadata called model which tell us the name of our worker model.\n WorkersStarted returns all workers include those which are running to build a vm model or to register a worker model. For example in the vsphere case, in order to count them we all prefix our worker spawned with worker-.\n CanSpawn is where the magic happens, it\u0026rsquo;s in this function that you spawn your vms with the right configuration. In fact with vsphere we check if there is a vm model already created for the worker model passed in parameter. If it doesn\u0026rsquo;t we create a vm model with the user data store in worker model infos. Then we spawn a vm with right environment variables created from informations passed in parameters (workerModel, registerOnly, \u0026hellip;) and with a script inside the vm that download the worker binary, execute it and shutdown when all is done. In this function we also check if the worker should be launch to register or to execute steps. When we launch a worker for register it means that the worker is launched and then send all there binary capabilities to the api for this worker model but don\u0026rsquo;t execute any jobs.\n In our vsphere implementation we also launch multiple goroutine to clean and kill workers which seem down or in error. It\u0026rsquo;s a ticker that check all vms state in a periodic way.\n  Test If you want to test that you just have to launch it like that :\n$ engine start hatchery:vsphere --config config.toml  "
},
{
	"uri": "https://ovh.github.io/cds/hosting/monitoring/",
	"title": "Monitoring",
	"tags": [],
	"description": "",
	"content": " Status Handler on API https://your.cds.instance/mon/status returns the status of CDS Engine.\nIf status != OK, something is wrong on your CDS Instance.\nExample:\n{ \u0026quot;now\u0026quot;: \u0026quot;2018-01-09T20:24:20.481193492Z\u0026quot;, \u0026quot;lines\u0026quot;: [ { \u0026quot;status\u0026quot;: \u0026quot;OK\u0026quot;, \u0026quot;component\u0026quot;: \u0026quot;Version\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;0.25.1-snapshot+1455.cds\u0026quot; }, ... { \u0026quot;status\u0026quot;: \u0026quot;OK\u0026quot;, \u0026quot;component\u0026quot;: \u0026quot;Database\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;20 conns\u0026quot; }, { \u0026quot;status\u0026quot;: \u0026quot;OK\u0026quot;, \u0026quot;component\u0026quot;: \u0026quot;LastUpdate Connected\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;14\u0026quot; }, { \u0026quot;status\u0026quot;: \u0026quot;OK\u0026quot;, \u0026quot;component\u0026quot;: \u0026quot;Worker Model Errors\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;0\u0026quot; } ... }  Monitoring with Command Line ./cdsctl monitoring  This will returns Queue status, Workers \u0026amp; Hatheries Status and CDS Engine Status on bottom right.\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/sidebar/",
	"title": "Sidebar",
	"tags": [],
	"description": "",
	"content": "On the left sidebar, there is only one select box for filter on CDS Tags.\nSo, what\u0026rsquo;s a tag? A tag is a CDS Variable, exported as a tag. There are default tags as git.branch, git.hash, tiggered_by and environment. For example if you want to know on which branch the build was launched you just have to filter on a specific CDS tag (in this case git.branch)\nInside a job, a user can add a Tag with the worker command\nworker tag tagKey=tagValue  See worker tab documentation\nTags are useful to add informations and context for a run.\nIf you want to filter all runs in sidebar, you can select the tags displayed: Go to Workflow → Advanced → \u0026ldquo;Tags to display in the sidebar\u0026rdquo;.\n"
},
{
	"uri": "https://ovh.github.io/cds/hosting/upgrade/",
	"title": "Upgrade your CDS Instance",
	"tags": [],
	"description": "",
	"content": " Upgrade Binary Update your CDS Engine binary from latest Release from Github:\n./engine update --from-github  Database Migration # get the file sql.tar.gz from latest release from https://github.com/ovh/cds/releases # unzip sql.tar.gz inside a sql/ directory, then run this command: ./engine database upgrade --db-password=cds --db-sslmode=disable --db-name=cds --migrate-dir=sql --db-connect-timeout=20  Restart your CDS API ./engine start api ...  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/design/advanced/",
	"title": "Workflows Advanced",
	"tags": [],
	"description": "",
	"content": "  Update a Workflow run number  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/plugins/write-plugin/",
	"title": "Write a Plugin",
	"tags": [],
	"description": "",
	"content": "A CDS worker executes job, and job is composed of steps.\nA step is :\n a builtin action, as GitClone, etc\u0026hellip; read more a user action read more a Plugin Action  A Plugin is a Golang Binary.\nTake a look at https://github.com/ovh/cds/tree/master/sdk/plugin/dummy/dummy_plugin.go\nContribute on https://github.com/ovh/cds/tree/master/contrib/plugins\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/builtin/artifact-download/",
	"title": "Artifact Download",
	"tags": [],
	"description": "",
	"content": " Artifact Download Action is a builtin action, you can\u0026rsquo;t modify it.\nThis action can be used to retrieve an artifact previously uploaded by an Artifact Upload action.\nParameters  application: Application from where artifacts will be downloaded pipeline: Pipeline from where artifacts will be downloaded tag: Tag set in the Artifact Upload action path: Path where artifacts will be downloaded  Example  Workflow Configuration: a pipeline doing an upload artifact and another doing a download artifact.   Job Configuration: download artifact from pipeline parent   Run pipeline, check logs  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/builtin/artifact-upload/",
	"title": "Artifact Upload",
	"tags": [],
	"description": "",
	"content": " Artifact Upload Action is a builtin action, you can\u0026rsquo;t modify it.\nThis action can be used to upload artifacts in CDS. This is the recommended way to share files between pipelines or stages.\nParameters  path: Path of file to upload tag: Tag to apply to your file.  Example  Create a file myFile and upload it.   Launch pipeline, check logs   View artifact  "
},
{
	"uri": "https://ovh.github.io/cds/",
	"title": "CDS - Continuous Delivery Service",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ovh.github.io/cds/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ovh.github.io/cds/cli/sdk/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "  Workers List  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/builtin/gitclone/",
	"title": "GitClone",
	"tags": [],
	"description": "",
	"content": " GitClone is a builtin action, you can\u0026rsquo;t modify it.\nThis action clones a repository into a new directory.\nThis will retrieve a shallow git clone (depth==1).\nYou may want to use a privateKey to clone from an SSH repository. To do so, you will need to add a project or an application variable of type key. {{.cds.app.a-key.pub}}\nParameters  url - mandatory - the git URL must include information about the transport protocol, the address of the remote server, and the path to the repository. privateKey - optional - the private key to be able to git clone from ssh user - optional - the user to be able to git clone from https with authentication password - optional - the password to be able to git clone from https with authentication branch - optional - Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository’s HEAD, point to {{.git.branch}} branch instead. commit - optional - the current branch head (HEAD) to the commit directory - optional - the name of a directory to clone into.  Example  Add repository manager on your application. We can use CDS Variables {{.git...}} in Job Configuration   Job Configuration.   Launch pipeline, check logs   View artifact  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/builtin/junit/",
	"title": "JUnit",
	"tags": [],
	"description": "",
	"content": " JUnit is a builtin action, you can\u0026rsquo;t modify it.\nThis action parses a given Junit formatted XML file to extract its test results.\nParameters  path: Path to a junit xml file  Example  Job Configuration.   Launch pipeline, check XUnit Result   And view details:  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/",
	"title": "REST API",
	"tags": [],
	"description": "",
	"content": " How to request CDS API? You need two HTTP Headers to request CDS API:\n Session-Token: your-cds-token X-Requested-With: X-CDS-SDK  # List CDS Project curl -H \u0026quot;Session-Token: your-cds-token\u0026quot; -H \u0026quot;X-Requested-With: X-CDS-SDK\u0026quot; https://your-cds-api/project  About CDS Token The CDS UI uses a non-persistent token. If you want to play with CDS API, you probably need a persistent token.\nYou can generate it with:\n cdsctl login Code it with the Go SDK Call CDS API: POST /login with body {\u0026quot;username\u0026quot;:\u0026quot;your-username\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;your-password\u0026quot;}  CDS HTTP Routes  action admin artifact auth build config download group hatchery hook import login mon navbar notification parameter pipeline platform plugin project queue repositories_manager requirement suggest user variable worker workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/sdk/",
	"title": "SDK Golang",
	"tags": [],
	"description": "",
	"content": " Generate a persistent token There is three ways to generate a persistent token:\n cdsctl login call CDS API Code it:  conf := cdsclient.Config{ Host: \u0026quot;http://your-cds-instance\u0026quot;, } client = cdsclient.New(conf) // replace username and password ok, token, err := client.UserLogin(username, password) if err != nil { return err } if !ok { return fmt.Errorf(\u0026quot;login failed\u0026quot;) } fmt.Printf(\u0026quot;export CDS_API_URL=%s\\n\u0026quot;, url) fmt.Printf(\u0026quot;export CDS_USER=%s\\n\u0026quot;, username) fmt.Printf(\u0026quot;export CDS_TOKEN=%s\\n\u0026quot;, token)  How to use it? You have to initialize a cdsclient:\ncfg := cdsclient.Config{ Host: host, Token: token, User: username, } client := cdsclient.New(cfg)  and then, you can use it:\n// list workers workers, err := client.WorkerList() // list users users, err := client.UserList() // list workflow runs runs, err := client.client.WorkflowRunList(...)  Go on https://godoc.org/github.com/ovh/cds/sdk/cdsclient to see all available funcs.\nSee also  Examples  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/builtin/script/",
	"title": "Script",
	"tags": [],
	"description": "",
	"content": " Script is a builtin action, you can\u0026rsquo;t modify it.\nThis action executes a given script with a given interpreter.\nParameters  script: Content of your script. You can put  #!/bin/bash  or\n#!/bin/perl  at first line. This will define the interpreter.\nMake sure that the binary used is in the pre-requisites of the action.\nIf you use a shebang bash, sh, zsh or ksh, CDS will return a failure on your step if an executed command fails.\nIf you want to control command\u0026rsquo;s exit code, you have to add\nset +e  Below is an example of a step that will fail at the first line:\nwhich a-unknown-binary # Step will fail here, lines below won't be executed if [ $? -ne 0 ]; then echo \u0026quot;binary a-unknown-binary does not exists\u0026quot;; # this won't be displayed exit 1 fi; exit 0  If you want to display an error message before exiting, you should rather use:\nset +e which a-unknown-binary if [ $? -ne 0 ]; then echo \u0026quot;binary a-unknown-binary does not exists\u0026quot;; # this will be displayed exit 1 fi; exit 0  Using CDS variables in a script You can use CDS Variables in a step script.\nExample  Job Configuration, a step with perl, another with bash   Launch pipeline, check logs  "
},
{
	"uri": "https://ovh.github.io/cds/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ovh.github.io/cds/cli/sdk/examples/go-workers-list/",
	"title": "Workers List",
	"tags": [],
	"description": "",
	"content": " List workers Create a file main.go with this content:\npackage main import ( \u0026quot;flag\u0026quot; \u0026quot;fmt\u0026quot; \u0026quot;os\u0026quot; \u0026quot;github.com/ovh/cds/sdk/cdsclient\u0026quot; ) var host, token, username string func init() { flag.StringVar(\u0026amp;host, \u0026quot;api\u0026quot;, \u0026quot;http://localhost:8081\u0026quot;, \u0026quot;CDS API URL, ex: http://localhost:8081\u0026quot;) flag.StringVar(\u0026amp;token, \u0026quot;token\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;CDS Token\u0026quot;) flag.StringVar(\u0026amp;username, \u0026quot;username\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;CDS Username\u0026quot;) } func main() { flag.Parse() cfg := cdsclient.Config{ Host: host, Token: token, User: username, } client := cdsclient.New(cfg) workers, err := client.WorkerList() if err != nil { fmt.Fprintf(os.Stderr, \u0026quot;Error while getting workers:%s\u0026quot;, err) os.Exit(1) } if len(workers) == 0 { fmt.Println(\u0026quot;\u0026gt; No worker\u0026quot;) } else { fmt.Println(\u0026quot;Current Workers:\u0026quot;) for _, w := range workers { fmt.Printf(\u0026quot;\u0026gt; %s\\n\u0026quot;, w.Name) } } }  Build \u0026amp; run it go run main.go --username admin --token xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx --api http://localhost:8081  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/action/",
	"title": "action",
	"tags": [],
	"description": "",
	"content": " List all public actions    URL /action     Method GET   Permissions Auth: true   Code getActionsHandler    GET /action/\u0026lt;actionID\u0026gt;/audit    URL /action/\u0026lt;actionID\u0026gt;/audit     Method GET   Permissions NeedAdmin: true - Auth: true   Code getActionAuditHandler    GET /action/\u0026lt;actionName\u0026gt;/using    URL /action/\u0026lt;actionName\u0026gt;/using     Method GET   Permissions NeedAdmin: true - Auth: true   Code getPipelinesUsingActionHandler    PUT /action/\u0026lt;permActionName\u0026gt;    URL /action/\u0026lt;permActionName\u0026gt;     Method PUT   Permissions Auth: true   Code updateActionHandler    POST /action/\u0026lt;permActionName\u0026gt;    URL /action/\u0026lt;permActionName\u0026gt;     Method POST   Permissions Auth: true   Code addActionHandler    DELETE /action/\u0026lt;permActionName\u0026gt;    URL /action/\u0026lt;permActionName\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteActionHandler    GET /action/\u0026lt;permActionName\u0026gt;    URL /action/\u0026lt;permActionName\u0026gt;     Method GET   Permissions Auth: true   Code getActionHandler    GET /action/\u0026lt;permActionName\u0026gt;/export    URL /action/\u0026lt;permActionName\u0026gt;/export     Method GET   Permissions Auth: true   Code getActionExportHandler    importAction insert OR update an existing action.    URL /action/import     Method POST   Permissions NeedAdmin: true - Auth: true   Code importActionHandler    GET /action/requirement    URL /action/requirement     Method GET   Permissions Auth: false   Code getActionsRequirements    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/action/",
	"title": "action",
	"tags": [],
	"description": "",
	"content": " cdsctl action Manage CDS action\nSynopsis Manage CDS action\nOptions  -h, --help help for action  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl action delete - Delete a CDS action cdsctl action doc - Generate Action Documentation: cdsctl action doc  cdsctl action export - Export a CDS action cdsctl action import - Import a CDS action cdsctl action list - List CDS actions cdsctl action show - Show a CDS action  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/keys/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": " cdsctl application keys add Add a new key on application. key type can be ssh or pgp\nSynopsis Add a new key on application. key type can be ssh or pgp\ncdsctl application keys add [ PROJECT-KEY APPLICATION-NAME ] KEY-NAME KEY-TYPE [flags]  Options  -h, --help help for add  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application keys - Manage CDS application keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/variable/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": " cdsctl application variable add Add a new variable on application. variable type can be one of password, text, string, key, boolean, number, repository\nSynopsis Add a new variable on application. variable type can be one of password, text, string, key, boolean, number, repository\ncdsctl application variable add [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE [flags]  Options  -h, --help help for add  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application variable - Manage CDS application variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/keys/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": " cdsctl environment keys add Add a new key on environment. key-type can be ssh or pgp\nSynopsis Add a new key on environment. key-type can be ssh or pgp\ncdsctl environment keys add [ PROJECT-KEY ] ENV-NAME KEY-NAME KEY-TYPE [flags]  Options  -h, --help help for add  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment keys - Manage CDS environment keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/variable/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": " cdsctl environment variable add Add a new variable on environment. variable type can be one of password, text, string, key, boolean, number, repository\nSynopsis Add a new variable on environment. variable type can be one of password, text, string, key, boolean, number, repository\ncdsctl environment variable add [ PROJECT-KEY ] ENV-NAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE [flags]  Options  -h, --help help for add  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment variable - Manage CDS environment variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/user/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": " cdsctl group user add Add a user into a group\nSynopsis Add a user into a group\ncdsctl group user add GROUPNAME USERNAME [flags]  Options  -h, --help help for add  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl group user - Manage CDS users group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/keys/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": " cdsctl project keys add Add a new key on project. key-type can be ssh or pgp\nSynopsis Add a new key on project. key-type can be ssh or pgp\ncdsctl project keys add [ PROJECT-KEY ] KEY-NAME KEY-TYPE [flags]  Options  -h, --help help for add  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project keys - Manage CDS project keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/variable/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": " cdsctl project variable add Add a new variable on project. Variable type can be one of password, text, string, key, boolean, number, repository\nSynopsis Add a new variable on project. Variable type can be one of password, text, string, key, boolean, number, repository\ncdsctl project variable add [ PROJECT-KEY ] VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE [flags]  Options  -h, --help help for add  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project variable - Manage CDS project variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/worker/model/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": " cdsctl worker model add cdsctl worker model add [name] [docker|openstack|vsphere] \u0026ndash;group [group]\nSynopsis Available model type : - Docker images (\u0026ldquo;docker\u0026rdquo;) - Openstack image (\u0026ldquo;openstack\u0026rdquo;) - VSphere image (\u0026ldquo;vsphere\u0026rdquo;)\ncdsctl worker model add NAME TYPE GROUP [flags]  Options  --flavor string Flavor value (only for openstack) -h, --help help for add --image string Image value --userdata string Path to UserData file (only for vsphere or openstack)  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl worker model - Manage Worker Model  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/admin/",
	"title": "admin",
	"tags": [],
	"description": "",
	"content": " getProfileIndex returns the profiles index    URL /admin/debug     Method GET   Permissions Auth: false   Code getProfileIndexHandler    getProfile responds with the pprof-formatted profile named by the request.    URL /admin/debug/\u0026lt;name\u0026gt;     Method POST   Permissions NeedAdmin: true - Auth: true   Code getProfileHandler    getCPUProfile responds with the pprof-formatted cpu profile.    URL /admin/debug/cpu     Method POST   Permissions NeedAdmin: true - Auth: true   Code getCPUProfileHandler    getTrace responds with the execution trace in binary form.    URL /admin/debug/trace     Method POST   Permissions NeedAdmin: true - Auth: true   Code getTraceHandler    GET /admin/maintenance    URL /admin/maintenance     Method GET   Permissions NeedAdmin: true - Auth: true   Code getAdminMaintenanceHandler    POST /admin/maintenance    URL /admin/maintenance     Method POST   Permissions NeedAdmin: true - Auth: true   Code postAdminMaintenanceHandler    DELETE /admin/maintenance    URL /admin/maintenance     Method DELETE   Permissions NeedAdmin: true - Auth: true   Code deleteAdminMaintenanceHandler    GET /admin/services    URL /admin/services     Method GET   Permissions NeedAdmin: true - Auth: true   Code getAdminServicesHandler    GET /admin/services/\u0026lt;service\u0026gt;    URL /admin/services/\u0026lt;service\u0026gt;     Method GET   Permissions NeedAdmin: true - Auth: true   Code getAdminServiceHandler    POST /admin/services/\u0026lt;service\u0026gt;/call    URL /admin/services/\u0026lt;service\u0026gt;/call     Method POST   Permissions NeedAdmin: true - Auth: true   Code postAdminServiceCallHandler    PUT /admin/services/\u0026lt;service\u0026gt;/call    URL /admin/services/\u0026lt;service\u0026gt;/call     Method PUT   Permissions NeedAdmin: true - Auth: true   Code putAdminServiceCallHandler    GET /admin/services/\u0026lt;service\u0026gt;/call    URL /admin/services/\u0026lt;service\u0026gt;/call     Method GET   Permissions NeedAdmin: true - Auth: true   Code getAdminServiceCallHandler    DELETE /admin/services/\u0026lt;service\u0026gt;/call    URL /admin/services/\u0026lt;service\u0026gt;/call     Method DELETE   Permissions NeedAdmin: true - Auth: true   Code deleteAdminServiceCallHandler    DELETE /admin/warning    URL /admin/warning     Method DELETE   Permissions NeedAdmin: true - Auth: true   Code adminTruncateWarningsHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/admin/",
	"title": "admin",
	"tags": [],
	"description": "",
	"content": " cdsctl admin Manage CDS (admin only)\nSynopsis Manage CDS (admin only)\nOptions  -h, --help help for admin  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl admin hooks - Manage CDS Hooks tasks cdsctl admin services - Manage CDS services  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/advanced/",
	"title": "advanced",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow advanced Manage Workflow Advanced\nSynopsis Manage Workflow Advanced\nOptions  -h, --help help for advanced  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow cdsctl workflow advanced delete - Delete a CDS workflow cdsctl workflow advanced number - Manage Workflow Run Number  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/",
	"title": "application",
	"tags": [],
	"description": "",
	"content": " cdsctl application Manage CDS application\nSynopsis Manage CDS application\nOptions  -h, --help help for application  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl application create - Create a CDS application cdsctl application delete - Delete a CDS application cdsctl application export - Export an application cdsctl application group - Manage CDS group linked to an application cdsctl application import - Import an application cdsctl application keys - Manage CDS application keys cdsctl application list - List CDS applications cdsctl application show - Show a CDS application cdsctl application variable - Manage CDS application variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/artifact/",
	"title": "artifact",
	"tags": [],
	"description": "",
	"content": " GET /artifact/\u0026lt;hash\u0026gt;    URL /artifact/\u0026lt;hash\u0026gt;     Method GET   Permissions Auth: false   Code downloadArtifactDirectHandler    GET /artifact/store    URL /artifact/store     Method GET   Permissions Auth: false   Code getArtifactsStoreHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/artifact/",
	"title": "artifact",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow artifact Manage Workflow Artifact\nSynopsis Manage Workflow Artifact\nOptions  -h, --help help for artifact  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow cdsctl workflow artifact download - Download artifacts of one Workflow Run cdsctl workflow artifact list - List artifacts of one Workflow Run  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/artifacts/",
	"title": "artifacts",
	"tags": [],
	"description": "",
	"content": " worker artifacts worker artifacts [\u0026ndash;workflow=] [\u0026ndash;number=] [\u0026ndash;tag=] [\u0026ndash;pattern=]\nSynopsis Inside a job, you can list artifacts of a workflow:\nworker artifacts --pattern=\u0026quot;files.*.yml\u0026quot; #theses two commands have the same result: worker artifacts worker artifacts --workflow={{.cds.workflow}} --number={{.cds.run.number}}  worker artifacts [flags]  Options  -h, --help help for artifacts --number string Workflow Number. Optional, default: current workflow run --pattern string Pattern matching files to list. Optional, default: * --tag string Tag matching files to list. Optional --workflow string Workflow name. Optional, default: current workflow  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/auth/",
	"title": "auth",
	"tags": [],
	"description": "",
	"content": " AuthMode returns the auth mode : local ok ldap    URL /auth/mode     Method GET   Permissions Auth: false   Code authModeHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/build/",
	"title": "build",
	"tags": [],
	"description": "",
	"content": " POST /build/\u0026lt;id\u0026gt;/log    URL /build/\u0026lt;id\u0026gt;/log     Method POST   Permissions Auth: true   Code addBuildLogHandler    POST /build/\u0026lt;id\u0026gt;/step    URL /build/\u0026lt;id\u0026gt;/step     Method POST   Permissions Auth: true   Code updateStepStatusHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/cache/",
	"title": "cache",
	"tags": [],
	"description": "",
	"content": " worker cache Inside a project, you can create or retrieve a cache from your worker with a tag\nSynopsis Inside a project, you can create or retrieve a cache from your worker with a tag (useful for vendors for example).\nYou can access to this cache from any workflow inside a project. You just have to choose a tag that fits with your needs.\nFor example if you need a different cache for each workflow so choose a tag scoped with your workflow name and workflow version (example of tag value: {{.cds.workflow}}-{{.cds.version}})\nUse Case Java Developers often use maven to manage dependencies. The mvn install command could be long because all the maven dependencies have to be downloaded on a fresh CDS Job workspace. With the worker cache feature, you don\u0026rsquo;t have to download the dependencies if they haven\u0026rsquo;t been updated since the last run of the job.\n cache push: take the current .m2/ directory and set it as a cache cache pull: download a cache of .m2 directory  Here, an example of a script inside a CDS Job using the cache feature:\n#!/bin/bash tag=($(md5sum pom.xml)) # download the cache of .m2/ if worker cache pull $tag; then echo \u0026quot;.m2/ getted from cache\u0026quot;; fi # update the directory .m2/ # as there is a cache, mvn does not need to download all dependencies # if they are not updated on upstream mvn install # put in cache the updated .m2/ directory worker cache push $tag .m2/  Options  -h, --help help for cache  SEE ALSO  worker - CDS Worker worker cache pull - worker cache pull tagValue worker cache push - worker cache push tagValue {{.cds.workspace}}/pathToUpload  "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/user/cds-docker-package/",
	"title": "cds-docker-package",
	"tags": [],
	"description": "",
	"content": " Build image and push it to docker repository\nParameters  dockerOpts: Docker options, Enter \u0026ndash;no-cache \u0026ndash;pull if you want for example dockerRegistry: Docker Registry. Enter myregistry for build image myregistry/myimage:mytag dockerRegistryPassword: Docker Registry Password. Enter password to connect on your docker registry. dockerRegistryUsername: Docker Registry Username. Enter username to connect on your docker registry. dockerfileDirectory: Directory which contains your Dockerfile. imageName: Name of your docker image, without tag. Enter myimage for build image myregistry/myimage:mytag imageTag: Tag og your docker image. Enter mytag for build image myregistry/myimage:mytag. {{.cds.version}} is a good tag from CDS. You can use many tags: firstTag,SecondTag Example : {{.cds.version}},latest  Requirements  docker: type: binary Value: docker  More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/user/cds-go-build/",
	"title": "cds-go-build",
	"tags": [],
	"description": "",
	"content": " Go Build: compile a go program\nParameters  architecture: GOARCH artifactUpload: Upload Binary as CDS Artifact binary: Binary name: Put foo for go build -o foo cgoDisabled: detectRaceCondition: Enable data race detection. It\u0026rsquo;s flag -race flags: flags for go build. Put -ldflags \u0026ldquo;-X main.xyz=abc\u0026rdquo; for go build -ldflags \u0026ldquo;-X main.xyz=abc\u0026rdquo; os: GOOS package: go package to compile. Put host.ext/foo/bar for go build host.ext/foo/bar preRun: Pre-command. Example: export CGO_ENABLED=0 runGoGet: Run go get -u before go build  Requirements  bash: type: binary Value: bash go: type: binary Value: go  More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/user/cds-nexus-upload/",
	"title": "cds-nexus-upload",
	"tags": [],
	"description": "",
	"content": " Upload file on Nexus\nParameters  artifactId: Artifact id of the artifact extension: Extension of the artifact files: Regex of files you want to upload groupId: Group id of the artifact login: Login for nexus packaging: Packaging type of the artifact password: Password for nexus repository: Nexus repository that the artifact is contained in url: Nexus URL version: Version of the artifact. Supports resolving of \u0026lsquo;LATEST\u0026rsquo;, \u0026lsquo;RELEASE\u0026rsquo; and snapshot versions (\u0026lsquo;1.0-SNAPSHOT\u0026rsquo;) too.  Requirements  bash: type: binary Value: bash curl: type: binary Value: curl  More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/user/cds-perl-test/",
	"title": "cds-perl-test",
	"tags": [],
	"description": "",
	"content": " Parameters  perllib: PERL_LIB, added to $PERL5LIB proveOptions: Options passed to prove testDirectory:  Requirements  bash: type: binary Value: bash perl: type: binary Value: perl prove: type: binary Value: prove  More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/user/cds-publish-ovh-metrics/",
	"title": "cds-publish-ovh-metrics",
	"tags": [],
	"description": "",
	"content": " Publish a metric on OVH Metrics. See https://www.ovh.com/fr/data-platforms/metrics/ and doc on https://docs.ovh.com/gb/en/cloud/metrics/\nParameters  file: Metrics file to push (optional) See: http://www.warp10.io/apis/ingress/ labels: Labels of your metric (one K/V per line separated by a space) name: Name of you metric (optional) region: Metrics region token: Metrics write token value: Value of your metric (T=true) See: http://www.warp10.io/apis/ingress/  Requirements  bash: type: binary Value: bash curl: type: binary Value: curl  More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/user/cds-python-pylint/",
	"title": "cds-python-pylint",
	"tags": [],
	"description": "",
	"content": " Run pylint. By default, each pylint recommendation will be displayed as a Junit test. The short errors are fully contained inside the test title, an arrow (-\u0026gt;) will be present if a part of the recommendation is displayed in the test body.\nParameters  extra_options: Extra options to pass during pylint invocation. ignore: List of ignored files / directory (base name, not path), separated by a ; module_path: List of modules paths (absolute or relative) to launch pylint into, separated by a ;. If empty, will launch pylint inside the working directory pylintrc: Path of the pylintrc file, or its content. +If your pylintrc file is not used, try to use an absolute path using the variable {{.cds.workspace}} that points to the container default working directory raw_output: Skip the xunit + Junit step and output a raw pylint result file. raw_output_file: File to output the raw result if raw output is checked. If empty, will only log the results. xml_output_file: File to output the result xunit xml, it should not be empty.  Requirements  python3.5: type: binary Value: python3.5 virtualenv: type: binary Value: virtualenv  More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/",
	"title": "cdsctl",
	"tags": [],
	"description": "",
	"content": " cdsctl CDS Command line utility\nSynopsis Download You\u0026rsquo;ll find last release of cdsctl on Github Releases.\nAuthentication Per default, the command line cdsctl uses your keychain on your os:\n OSX: Keychain Access Linux System: Secret-tool (libsecret) Windows: Windows Credentials service  You can bypass keychain tools by using environment variables:\nCDS_API_URL=\u0026quot;https://instance.cds.api\u0026quot; CDS_USER=\u0026quot;username\u0026quot; CDS_TOKEN=\u0026quot;yourtoken\u0026quot; cdsctl [command]  Want to debug something? You can use CDS_VERBOSE environment variable.\nCDS_VERBOSE=true cdsctl [command]  If you\u0026rsquo;re using a self-signed certificate on CDS API, you probably want to use CDS_INSECURE variable.\nCDS_INSECURE=true cdsctl [command]  cdsctl [flags]  Options  -f, --file string set configuration file -h, --help help for cdsctl -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl action - Manage CDS action cdsctl admin - Manage CDS (admin only) cdsctl application - Manage CDS application cdsctl encrypt - Encrypt variable into your CDS project cdsctl environment - Manage CDS environment cdsctl group - Manage CDS group cdsctl health - Check CDS health cdsctl login - Login to CDS cdsctl monitoring - CDS monitoring cdsctl pipeline - Manage CDS pipeline cdsctl project - Manage CDS project cdsctl shell - cdsctl interactive shell cdsctl signup - Signup on CDS cdsctl token - Manage CDS group token cdsctl update - Update cdsctl from CDS API or from CDS Release cdsctl user - Manage CDS user cdsctl version - show cdsctl version cdsctl worker - Manage CDS worker cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/config/check/",
	"title": "check",
	"tags": [],
	"description": "",
	"content": " engine config check Check CDS configuration file\nSynopsis $ engine config check \nengine config check [flags]  Options  -h, --help help for check  SEE ALSO  engine config - Manage CDS Configuration  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/config/",
	"title": "config",
	"tags": [],
	"description": "",
	"content": " ConfigUser return url of CDS UI    URL /config/user     Method GET   Permissions Auth: true - Auth: true   Code ConfigUserHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/config/",
	"title": "config",
	"tags": [],
	"description": "",
	"content": " engine config Manage CDS Configuration\nSynopsis Manage CDS Configuration\nOptions  -h, --help help for config  SEE ALSO  engine - CDS Engine engine config check - Check CDS configuration file engine config new - CDS configuration file assistant  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/user/confirm/",
	"title": "confirm",
	"tags": [],
	"description": "",
	"content": " cdsctl user confirm Confirm CDS user password reset\nSynopsis Confirm CDS user password reset\ncdsctl user confirm USERNAME TOKEN [flags]  Options  -h, --help help for confirm  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl user - Manage CDS user  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/create/",
	"title": "create",
	"tags": [],
	"description": "",
	"content": " cdsctl application create Create a CDS application\nSynopsis Create a CDS application\ncdsctl application create [ PROJECT-KEY ] APPLICATION-NAME [flags]  Options  -h, --help help for create  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application - Manage CDS application  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/create/",
	"title": "create",
	"tags": [],
	"description": "",
	"content": " cdsctl environment create Create a CDS environment\nSynopsis Create a CDS environment\ncdsctl environment create [ PROJECT-KEY ] ENVIRONMENT-NAME [flags]  Options  -h, --help help for create  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment - Manage CDS environment  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/create/",
	"title": "create",
	"tags": [],
	"description": "",
	"content": " cdsctl group create Create a CDS group\nSynopsis Create a CDS group\ncdsctl group create GROUP-NAME [flags]  Options  -h, --help help for create  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl group - Manage CDS group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/pipeline/create/",
	"title": "create",
	"tags": [],
	"description": "",
	"content": " cdsctl pipeline create Create a CDS pipeline\nSynopsis Create a CDS pipeline\ncdsctl pipeline create [ PROJECT-KEY ] PIPELINE-NAME [flags]  Options  -h, --help help for create --type string Pipeline type {build,deployment,testing} (default \u0026quot;build\u0026quot;) (default \u0026quot;build\u0026quot;)  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl pipeline - Manage CDS pipeline  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/create/",
	"title": "create",
	"tags": [],
	"description": "",
	"content": " cdsctl project create Create a CDS project\nSynopsis Create a CDS project\ncdsctl project create [ PROJECT-KEY PROJECT-NAME ] [GROUP-NAME] [flags]  Options  -h, --help help for create  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project - Manage CDS project  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/database/",
	"title": "database",
	"tags": [],
	"description": "",
	"content": " engine database Manage CDS database\nSynopsis Manage CDS database\nOptions  -h, --help help for database  SEE ALSO  engine - CDS Engine engine database downgrade - Downgrade schema engine database status - Show current migration status engine database upgrade - Upgrade schema  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/health/dbmigrate/",
	"title": "dbmigrate",
	"tags": [],
	"description": "",
	"content": " cdsctl health dbmigrate Show DB Migrate status\nSynopsis Show DB Migrate status\ncdsctl health dbmigrate [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for dbmigrate -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl health - Check CDS health  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/health/dbtimes/",
	"title": "dbtimes",
	"tags": [],
	"description": "",
	"content": " cdsctl health dbtimes Show some DB Times\nSynopsis Show some DB Times\ncdsctl health dbtimes [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for dbtimes  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl health - Check CDS health  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/action/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl action delete Delete a CDS action\nSynopsis Useful to delete a CDS action\ncdsctl action delete myAction\ncdsctl action delete ACTION-NAME [flags]  Options  -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl action - Manage CDS action  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl application delete Delete a CDS application\nSynopsis Delete a CDS application\ncdsctl application delete [ PROJECT-KEY APPLICATION-NAME ] [flags]  Options  --force Force delete without confirmation and exit 0 if resource does not exist -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application - Manage CDS application  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/keys/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl application keys delete Delete CDS an application key\nSynopsis Delete CDS an application key\ncdsctl application keys delete [ PROJECT-KEY APPLICATION-NAME ] KEY-NAME [flags]  Options  -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application keys - Manage CDS application keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/variable/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl application variable delete Delete CDS application variable\nSynopsis Delete CDS application variable\ncdsctl application variable delete [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-NAME [flags]  Options  -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application variable - Manage CDS application variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl environment delete Delete a CDS environment\nSynopsis Delete a CDS environment\ncdsctl environment delete [ PROJECT-KEY ] ENVIRONMENT-NAME [flags]  Options  --force Force delete without confirmation and exit 0 if resource does not exist -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment - Manage CDS environment  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/keys/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl environment keys delete Delete CDS environment key\nSynopsis Delete CDS environment key\ncdsctl environment keys delete [ PROJECT-KEY ] ENV-NAME KEY-NAME [flags]  Options  -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment keys - Manage CDS environment keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/variable/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl environment variable delete Delete CDS environment variable\nSynopsis Delete CDS environment variable\ncdsctl environment variable delete [ PROJECT-KEY ] ENV-NAME VARIABLE-NAME [flags]  Options  -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment variable - Manage CDS environment variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl group delete Delete a CDS group\nSynopsis Delete a CDS group\ncdsctl group delete GROUP-NAME [flags]  Options  --force Force delete without confirmation and exit 0 if resource does not exist -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl group - Manage CDS group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/user/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl group user delete Delete an user from a group\nSynopsis Delete an user from a group\ncdsctl group user delete GROUPNAME USERNAME [flags]  Options  --force Force delete without confirmation and exit 0 if resource does not exist -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl group user - Manage CDS users group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/pipeline/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl pipeline delete Delete a CDS pipeline\nSynopsis Delete a CDS pipeline\ncdsctl pipeline delete [ PROJECT-KEY ] PIPELINE-NAME [flags]  Options  --force Force delete without confirmation and exit 0 if resource does not exist -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl pipeline - Manage CDS pipeline  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl project delete Delete a CDS project\nSynopsis Delete a CDS project\ncdsctl project delete [ PROJECT-KEY ] [flags]  Options  --force Force delete without confirmation and exit 0 if resource does not exist -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project - Manage CDS project  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/keys/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl project keys delete Delete CDS project key\nSynopsis Delete CDS project key\ncdsctl project keys delete [ PROJECT-KEY ] KEY-NAME [flags]  Options  -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project keys - Manage CDS project keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/variable/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl project variable delete Delete CDS project variable\nSynopsis Delete CDS project variable\ncdsctl project variable delete [ PROJECT-KEY ] ENV-NAME VARIABLE-NAME [flags]  Options  -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project variable - Manage CDS project variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/token/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl token delete Delete a token linked to a group\nSynopsis Delete a token from a group and so revoke it to unauthorize future connection.\nPay attention you must be an administrator of the group to launch this command.\ncdsctl token delete GROUPNAME TOKENID [flags]  Options  --force Force delete without confirmation and exit 0 if resource does not exist -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl token - Manage CDS group token  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/worker/model/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl worker model delete Delete a CDS worker model\nSynopsis Delete a CDS worker model\ncdsctl worker model delete NAME ... [flags]  Options  --force Force delete without confirmation and exit 0 if resource does not exist -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl worker model - Manage Worker Model  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/advanced/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow advanced delete Delete a CDS workflow\nSynopsis Delete a CDS workflow\ncdsctl workflow advanced delete [ PROJECT-KEY WORKFLOW-NAME ] [flags]  Options  --force Force delete without confirmation and exit 0 if resource does not exist -h, --help help for delete  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow advanced - Manage Workflow Advanced  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/worker/disable/",
	"title": "disable",
	"tags": [],
	"description": "",
	"content": " cdsctl worker disable Disable CDS workers\nSynopsis Disable one on more CDS worker by their names.\nFor example if your want to disable all CDS workers you can run:\n$ cdsctl worker disable $(cdsctl worker list)\ncdsctl worker disable NAME ... [flags]  Options  -h, --help help for disable  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl worker - Manage CDS worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/action/doc/",
	"title": "doc",
	"tags": [],
	"description": "",
	"content": " cdsctl action doc Generate Action Documentation: cdsctl action doc \nSynopsis Generate Action Documentation: cdsctl action doc \ncdsctl action doc PATH [flags]  Options  -h, --help help for doc  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl action - Manage CDS action  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/database/downgrade/",
	"title": "downgrade",
	"tags": [],
	"description": "",
	"content": " engine database downgrade Downgrade schema\nSynopsis Undo a database migration.\nengine database downgrade [flags]  Options  --db-connect-timeout int Maximum wait for connection, in seconds (default 10) --db-host string DB Host (default \u0026quot;localhost\u0026quot;) --db-maxconn int DB Max connection (default 20) --db-name string DB Name (default \u0026quot;cds\u0026quot;) --db-password string DB Password --db-port int DB Port (default 5432) --db-sslmode string DB SSL Mode: require (default), verify-full, or disable (default \u0026quot;require\u0026quot;) --db-timeout int Statement timeout value in milliseconds (default 3000) --db-user string DB User (default \u0026quot;cds\u0026quot;) --dry-run Dry run downgrade -h, --help help for downgrade --limit int Max number of migrations to apply (0 = unlimited) (default 1) --migrate-dir string CDS SQL Migration directory (default \u0026quot;./engine/sql\u0026quot;)  SEE ALSO  engine database - Manage CDS database  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": " GET /download    URL /download     Method GET   Permissions Auth: true   Code downloadsHandler    GET /download/\u0026lt;name\u0026gt;/\u0026lt;os\u0026gt;/\u0026lt;arch\u0026gt;    URL /download/\u0026lt;name\u0026gt;/\u0026lt;os\u0026gt;/\u0026lt;arch\u0026gt;     Method GET   Permissions Auth: false   Code downloadHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/artifact/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow artifact download Download artifacts of one Workflow Run\nSynopsis Download artifacts of one Workflow Run\ncdsctl workflow artifact download [ PROJECT-KEY WORKFLOW-NAME ] NUMBER [ARTEFACT-NAME] [flags]  Options  -h, --help help for download  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow artifact - Manage Workflow Artifact  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": " worker download worker download [\u0026ndash;workflow=] [\u0026ndash;number=] [\u0026ndash;tag=] [\u0026ndash;pattern=]\nSynopsis Inside a job, there are two ways to download an artifact:\n with a step using action Download Artifacts with a step script (https://ovh.github.io/cds/workflows/pipelines/actions/builtin/script/), using the worker command: worker download --tag=\u0026lt;tag\u0026gt; \u0026lt;path\u0026gt;\nworker download \u0026ndash;pattern=\u0026ldquo;files.*.yml\u0026rdquo;\n#theses two commands have the same result: worker download worker download \u0026ndash;workflow={{.cds.workflow}} \u0026ndash;number={{.cds.run.number}}\n  worker download [flags]  Options  -h, --help help for download --number string Workflow Number to download from. Optional, default: current workflow run --pattern string Pattern matching files to download. Optional, default: * --tag string Tag matching files to download. Optional --workflow string Workflow name to download from. Optional, default: current workflow  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/encrypt/",
	"title": "encrypt",
	"tags": [],
	"description": "",
	"content": " cdsctl encrypt Encrypt variable into your CDS project\nSynopsis To be able to write secret in the CDS yaml files, you have to encrypt data with the project GPG key.\nCreate a secret variable:\n$ cdsctl encrypt MYPROJECT my-data my-super-secret-value my-data: 01234567890987654321  The command returns the value: 01234567890987654321. You can use this value in a configuration file.\nExample of use case: Import an environment with a secret.\nCreate an environment file to import :\n$ cat \u0026lt;\u0026lt; EOF \u0026gt; your-environment.yml name: your-environment values: a-readable-variable: type: string value: registry.ovh.net/engine/http2kafka my-data: type: password value: 01234567890987654321 EOF  Then, import then environment:\ncds environment import MYPROJECT your-environment.yml  Or push your workflow\ncds workflow push MYPROJECT *.yml  cdsctl encrypt [ PROJECT-KEY ] VARIABLE-NAME [SECRET-VALUE] [flags]  Examples cdsctl encrypt MYPROJECT my-data my-super-secret-value my-data: 01234567890987654321  Options  -h, --help help for encrypt  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/",
	"title": "engine",
	"tags": [],
	"description": "",
	"content": " engine CDS Engine\nSynopsis CDS\nContinuous Delivery Service\nEnterprise-Grade Continuous Delivery \u0026amp; DevOps Automation Open Source Platform\nhttps://ovh.github.io/cds/\nDownload You\u0026rsquo;ll find last release of CDS engine on Github Releases.\nOptions  -h, --help help for engine  SEE ALSO  engine config - Manage CDS Configuration engine database - Manage CDS database engine start - Start CDS engine update - Update engine binary engine uptodate - check if engine is uptodate engine version - Display CDS version  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/",
	"title": "environment",
	"tags": [],
	"description": "",
	"content": " cdsctl environment Manage CDS environment\nSynopsis Manage CDS environment\nOptions  -h, --help help for environment  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl environment create - Create a CDS environment cdsctl environment delete - Delete a CDS environment cdsctl environment export - Export an environment cdsctl environment group - Manage CDS group linked to an environment cdsctl environment import - Import an environment cdsctl environment keys - Manage CDS environment keys cdsctl environment list - List CDS environments cdsctl environment variable - Manage CDS environment variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/exit/",
	"title": "exit",
	"tags": [],
	"description": "",
	"content": " worker exit worker exit\nSynopsis worker exit command lets job finish current step and disabled all further steps\nworker exit [flags]  Options  -h, --help help for exit  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/action/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": " cdsctl action export Export a CDS action\nSynopsis Useful to export a CDS action\ncdsctl action export myAction\ncdsctl action export ACTION-NAME [flags]  Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) -h, --help help for export  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl action - Manage CDS action  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": " cdsctl application export Export an application\nSynopsis Export an application\ncdsctl application export [ PROJECT-KEY APPLICATION-NAME ] [flags]  Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) -h, --help help for export --with-permissions Export permissions  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application - Manage CDS application  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": " cdsctl environment export Export an environment\nSynopsis Export an environment\ncdsctl environment export [ PROJECT-KEY ] ENVIRONMENT-NAME [flags]  Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) -h, --help help for export --with-permissions Export permissions  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment - Manage CDS environment  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/pipeline/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": " cdsctl pipeline export Export CDS pipeline\nSynopsis Export CDS pipeline\ncdsctl pipeline export [ PROJECT-KEY ] PIPELINE-NAME [flags]  Options  --format string yml or json (default \u0026quot;yml\u0026quot;) -h, --help help for export --with-permission true or false  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl pipeline - Manage CDS pipeline  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow export Export a workflow\nSynopsis Export a workflow\ncdsctl workflow export [ PROJECT-KEY WORKFLOW-NAME ] [flags]  Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) -h, --help help for export --with-permissions Export permissions  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": " worker export worker export  \nSynopsis Inside a step script (https://ovh.github.io/cds/workflows/pipelines/actions/builtin/script/), you can create a build variable with the worker command:\n# worker export \u0026lt;varname\u0026gt; \u0026lt;value\u0026gt; worker export foo bar  then, you can use new build variable:\necho \u0026quot;{{.cds.build.foo}}\u0026quot;  Scope You can use the build variable in :\n the current job with {{.cds.build.varname}} the next stages in same pipeline {{.cds.build.varname}} the next pipelines {{.workflow.pipelineName.build.varname}} with pipelineName the name of the pipeline in your worklow   worker export [flags]  Options  -h, --help help for export  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/token/find/",
	"title": "find",
	"tags": [],
	"description": "",
	"content": " cdsctl token find Find an existing token\nSynopsis Find an existing token with his value to have his description, creation date and the name of the creator.\ncdsctl token find TOKEN [flags]  Examples cdsctl token find \u0026quot;myTokenValue\u0026quot;  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for find  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl token - Manage CDS group token  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/token/generate/",
	"title": "generate",
	"tags": [],
	"description": "",
	"content": " cdsctl token generate Generate a new token\nSynopsis Generate a new token when you use the cli or the api in scripts or for your worker, hatchery, uservices.\nThe expiration must be [daily|persistent|session].\nDaily expirate after one day.\nPersistent doesn\u0026rsquo;t expirate until you revoke them.\nPay attention you must be an administrator of the group to launch this command.\ncdsctl token generate GROUPNAME EXPIRATION [DESCRIPTION] [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for generate  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl token - Manage CDS group token  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/group/",
	"title": "group",
	"tags": [],
	"description": "",
	"content": " POST /group    URL /group     Method POST   Permissions Auth: true   Code addGroupHandler    GET /group    URL /group     Method GET   Permissions Auth: true   Code getGroupsHandler    DELETE /group/\u0026lt;group-name\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteGroupHandler    PUT /group/\u0026lt;group-name\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;     Method PUT   Permissions Auth: true   Code updateGroupHandler    GET /group/\u0026lt;group-name\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;     Method GET   Permissions Auth: true   Code getGroupHandler    generateToken allows a user to generate a token associated to a group permission    URL /group/\u0026lt;group-name\u0026gt;/token     Method POST   Permissions Auth: true   Code generateTokenHandler    GET /group/\u0026lt;group-name\u0026gt;/token    URL /group/\u0026lt;group-name\u0026gt;/token     Method GET   Permissions Auth: true   Code getGroupTokenListHandler    DELETE /group/\u0026lt;group-name\u0026gt;/token/\u0026lt;tokenid\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;/token/\u0026lt;tokenid\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteTokenHandler    POST /group/\u0026lt;group-name\u0026gt;/user    URL /group/\u0026lt;group-name\u0026gt;/user     Method POST   Permissions Auth: true   Code addUserInGroupHandler    DELETE /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;user-name\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;user-name\u0026gt;     Method DELETE   Permissions Auth: true   Code removeUserFromGroupHandler    POST /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;user-name\u0026gt;/admin    URL /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;user-name\u0026gt;/admin     Method POST   Permissions Auth: true   Code setUserGroupAdminHandler    DELETE /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;user-name\u0026gt;/admin    URL /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;user-name\u0026gt;/admin     Method DELETE   Permissions Auth: true   Code removeUserGroupAdminHandler    GET /group/public    URL /group/public     Method GET   Permissions Auth: true   Code getPublicGroupsHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/group/",
	"title": "group",
	"tags": [],
	"description": "",
	"content": " cdsctl application group Manage CDS group linked to an application\nSynopsis Manage CDS group linked to an application\nOptions  -h, --help help for group  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application - Manage CDS application cdsctl application group import - Import group linked to a CDS application  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/group/",
	"title": "group",
	"tags": [],
	"description": "",
	"content": " cdsctl environment group Manage CDS group linked to an environment\nSynopsis Manage CDS group linked to an environment\nOptions  -h, --help help for group  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment - Manage CDS environment cdsctl environment group import - Import group linked to a CDS environment  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/",
	"title": "group",
	"tags": [],
	"description": "",
	"content": " cdsctl group Manage CDS group\nSynopsis Manage CDS group\nOptions  -h, --help help for group  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl group create - Create a CDS group cdsctl group delete - Delete a CDS group cdsctl group list - List CDS groups cdsctl group show - Show a CDS group cdsctl group user - Manage CDS users group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/pipeline/group/",
	"title": "group",
	"tags": [],
	"description": "",
	"content": " cdsctl pipeline group Manage CDS group linked to a pipeline\nSynopsis Manage CDS group linked to a pipeline\nOptions  -h, --help help for group  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl pipeline - Manage CDS pipeline cdsctl pipeline group import - Import group linked to a CDS pipeline  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/group/",
	"title": "group",
	"tags": [],
	"description": "",
	"content": " cdsctl project group Manage CDS group linked to a project\nSynopsis Manage CDS group linked to a project\nOptions  -h, --help help for group  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project - Manage CDS project cdsctl project group import - Import group linked to a CDS project  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/hatchery/",
	"title": "hatchery",
	"tags": [],
	"description": "",
	"content": " POST /hatchery    URL /hatchery     Method POST   Permissions Auth: false   Code registerHatcheryHandler    PUT /hatchery/\u0026lt;id\u0026gt;    URL /hatchery/\u0026lt;id\u0026gt;     Method PUT   Permissions Auth: true   Code refreshHatcheryHandler    GET /hatchery/count/\u0026lt;workflowNodeRunID\u0026gt;    URL /hatchery/count/\u0026lt;workflowNodeRunID\u0026gt;     Method GET   Permissions Auth: true   Code hatcheryCountHandler    "
},
{
	"uri": "https://ovh.github.io/cds/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/health/",
	"title": "health",
	"tags": [],
	"description": "",
	"content": " cdsctl health Check CDS health\nSynopsis Check CDS health\nOptions  -h, --help help for health  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl health dbmigrate - Show DB Migrate status cdsctl health dbtimes - Show some DB Times cdsctl health status - Show CDS Status  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/history/",
	"title": "history",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow history Display CDS workflow runs history\nSynopsis Display CDS workflow runs history\ncdsctl workflow history [ PROJECT-KEY WORKFLOW-NAME ] [OFFSET] [LIMIT] [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for history -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/hook/",
	"title": "hook",
	"tags": [],
	"description": "",
	"content": " POST /hook    URL /hook     Method POST   Permissions Auth: false   Code receiveHookHandler    GET /hook/\u0026lt;uuid\u0026gt;/workflow/\u0026lt;workflowID\u0026gt;/vcsevent/\u0026lt;vcsServer\u0026gt;    URL /hook/\u0026lt;uuid\u0026gt;/workflow/\u0026lt;workflowID\u0026gt;/vcsevent/\u0026lt;vcsServer\u0026gt;     Method GET   Permissions Auth: true   Code getHookPollingVCSEvents    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/admin/hooks/",
	"title": "hooks",
	"tags": [],
	"description": "",
	"content": " cdsctl admin hooks Manage CDS Hooks tasks\nSynopsis Manage CDS Hooks tasks\nOptions  -h, --help help for hooks  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl admin - Manage CDS (admin only) cdsctl admin hooks list - List CDS Hooks Tasks  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " Import workflow as code    URL /import/\u0026lt;project-key\u0026gt;     Method POST   Permissions Auth: true   Code postImportAsCodeHandler    Description This the entrypoint to perform workflow as code. The first step is to post an operation leading to checkout application and scrapping files\nRequest Body {\u0026quot;vcs_Server\u0026quot;:\u0026quot;github\u0026quot;, \u0026quot;url\u0026quot;:\u0026quot;https://github.com/fsamin/go-repo.git\u0026quot;,\u0026quot;strategy\u0026quot;:{\u0026quot;connection_type\u0026quot;:\u0026quot;https\u0026quot;,\u0026quot;ssh_key\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;user\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;branch\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;default_branch\u0026quot;:\u0026quot;master\u0026quot;,\u0026quot;pgp_key\u0026quot;:\u0026quot;\u0026quot;},\u0026quot;setup\u0026quot;:{\u0026quot;checkout\u0026quot;:{\u0026quot;branch\u0026quot;:\u0026quot;master\u0026quot;}}}  Response Body {\u0026quot;uuid\u0026quot;:\u0026quot;ee3946ac-3a77-46b1-af78-77868fde75ec\u0026quot;,\u0026quot;url\u0026quot;:\u0026quot;https://github.com/fsamin/go-repo.git\u0026quot;,\u0026quot;strategy\u0026quot;:{\u0026quot;connection_type\u0026quot;:\u0026quot;https\u0026quot;,\u0026quot;ssh_key\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;user\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;branch\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;default_branch\u0026quot;:\u0026quot;master\u0026quot;,\u0026quot;pgp_key\u0026quot;:\u0026quot;\u0026quot;},\u0026quot;setup\u0026quot;:{\u0026quot;checkout\u0026quot;:{\u0026quot;branch\u0026quot;:\u0026quot;master\u0026quot;}}}  Get import workflow as code operation details    URL /import/\u0026lt;project-key\u0026gt;/\u0026lt;uuid\u0026gt;     Method GET   Permissions Auth: true   Code getImportAsCodeHandler    Description This route helps you to know if a \u0026ldquo;import as code\u0026rdquo; is over, and the details of the performed operation\nRequest Body None  Response Body {\u0026quot;uuid\u0026quot;:\u0026quot;ee3946ac-3a77-46b1-af78-77868fde75ec\u0026quot;,\u0026quot;url\u0026quot;:\u0026quot;https://github.com/fsamin/go-repo.git\u0026quot;,\u0026quot;strategy\u0026quot;:{\u0026quot;connection_type\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;ssh_key\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;user\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;branch\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;default_branch\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;pgp_key\u0026quot;:\u0026quot;\u0026quot;},\u0026quot;setup\u0026quot;:{\u0026quot;checkout\u0026quot;:{}},\u0026quot;load_files\u0026quot;:{\u0026quot;pattern\u0026quot;:\u0026quot;.cds/**/*.yml\u0026quot;,\u0026quot;results\u0026quot;:{\u0026quot;w-go-repo.yml\u0026quot;:\u0026quot;bmFtZTogdy1nby1yZXBvCgkJCQkJdmVyc2lvbjogdjEuMAoJCQkJCXBpcGVsaW5lOiBidWlsZAoJCQkJCWFwcGxpY2F0aW9uOiBnby1yZXBvCgkJCQkJcGlwZWxpbmVfaG9va3M6CgkJCQkJLSB0eXBlOiBSZXBvc2l0b3J5V2ViSG9vawoJCQkJCQ==\u0026quot;}},\u0026quot;status\u0026quot;:2}  Perform workflow as code import    URL /import/\u0026lt;project-key\u0026gt;/\u0026lt;uuid\u0026gt;/perform     Method POST   Permissions Auth: true   Code postPerformImportAsCodeHandler    Description This operation push the workflow as code into the project\nRequest Body None  Response Body translated message list  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/action/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " cdsctl action import Import a CDS action\nSynopsis Useful to import a CDS action from a file\ncdsctl action import myAction.yml\ncdsctl action import PATH [flags]  Options  -h, --help help for import  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl action - Manage CDS action  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/group/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " cdsctl application group import Import group linked to a CDS application\nSynopsis Import group linked to a CDS application\ncdsctl application group import [ PROJECT-KEY APPLICATION-NAME ] PATH [flags]  Options  --force Use force flag to replace groups in your application -h, --help help for import  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application group - Manage CDS group linked to an application  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " cdsctl application import Import an application\nSynopsis Import an application\ncdsctl application import [ PROJECT-KEY ] FILENAME [flags]  Options  --force Override application if exists -h, --help help for import  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application - Manage CDS application  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/group/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " cdsctl environment group import Import group linked to a CDS environment\nSynopsis Import group linked to a CDS environment\ncdsctl environment group import [ PROJECT-KEY ] ENVIRONMENT-NAME PATH [flags]  Options  --force Use force flag to replace groups in your environment -h, --help help for import  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment group - Manage CDS group linked to an environment  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " cdsctl environment import Import an environment\nSynopsis Import an environment\ncdsctl environment import [ PROJECT-KEY ] FILENAME [flags]  Options  --force Override environment if exists -h, --help help for import  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment - Manage CDS environment  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/pipeline/group/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " cdsctl pipeline group import Import group linked to a CDS pipeline\nSynopsis Import group linked to a CDS pipeline\ncdsctl pipeline group import [ PROJECT-KEY ] PIPELINE-NAME PATH [flags]  Options  --force Use force flag to replace groups in your pipeline -h, --help help for import  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl pipeline group - Manage CDS group linked to a pipeline  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/pipeline/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " cdsctl pipeline import Import CDS pipeline\nSynopsis PATH: Path or URL of pipeline to import\ncdsctl pipeline import [ PROJECT-KEY ] PATH [flags]  Options  --force Use force flag to update your pipeline -h, --help help for import  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl pipeline - Manage CDS pipeline  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/group/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " cdsctl project group import Import group linked to a CDS project\nSynopsis Import group linked to a CDS project\ncdsctl project group import [ PROJECT-KEY ] PATH [flags]  Options  --force Use force flag to replace groups in your project -h, --help help for import  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project group - Manage CDS group linked to a project  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow import Import a workflow\nSynopsis In case you want to import just your workflow.\nIf you want to update also dependencies likes pipelines, applications or environments at same time you have to use workflow push instead workflow import.\ncdsctl workflow import [ PROJECT-KEY ] FILENAME [flags]  Options  --force Override workflow if exists -h, --help help for import  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/init/",
	"title": "init",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow init Init a workflow\nSynopsis [WARNING] THIS IS AN EXPERIMENTAL FEATURE Initialize a workflow from your current repository, this will create yml files and push them to CDS.\ncdsctl workflow init [PROJECT-KEY] [flags]  Options  -r, --from-remote Initialize a workflow from your git origin -h, --help help for init  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/keys/",
	"title": "keys",
	"tags": [],
	"description": "",
	"content": " cdsctl application keys Manage CDS application keys\nSynopsis Manage CDS application keys\nOptions  -h, --help help for keys  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application - Manage CDS application cdsctl application keys add - Add a new key on application. key type can be ssh or pgp cdsctl application keys delete - Delete CDS an application key cdsctl application keys list - List CDS application keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/keys/",
	"title": "keys",
	"tags": [],
	"description": "",
	"content": " cdsctl environment keys Manage CDS environment keys\nSynopsis Manage CDS environment keys\nOptions  -h, --help help for keys  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment - Manage CDS environment cdsctl environment keys add - Add a new key on environment. key-type can be ssh or pgp cdsctl environment keys delete - Delete CDS environment key cdsctl environment keys list - List CDS environment keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/keys/",
	"title": "keys",
	"tags": [],
	"description": "",
	"content": " cdsctl project keys Manage CDS project keys\nSynopsis Manage CDS project keys\nOptions  -h, --help help for keys  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project - Manage CDS project cdsctl project keys add - Add a new key on project. key-type can be ssh or pgp cdsctl project keys delete - Delete CDS project key cdsctl project keys list - List CDS project keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/action/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl action list List CDS actions\nSynopsis Useful list CDS actions\ncdsctl action list\ncdsctl action list [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl action - Manage CDS action  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/admin/hooks/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl admin hooks list List CDS Hooks Tasks\nSynopsis List CDS Hooks Tasks\ncdsctl admin hooks list [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl admin hooks - Manage CDS Hooks tasks  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/admin/services/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl admin services list List CDS services\nSynopsis List CDS services\ncdsctl admin services list [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key -t, --type string Filter service by type  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl admin services - Manage CDS services  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/keys/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl application keys list List CDS application keys\nSynopsis List CDS application keys\ncdsctl application keys list [ PROJECT-KEY APPLICATION-NAME ] [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application keys - Manage CDS application keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl application list List CDS applications\nSynopsis List CDS applications\ncdsctl application list [ PROJECT-KEY ] [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application - Manage CDS application  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/variable/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl application variable list List CDS application variables\nSynopsis List CDS application variables\ncdsctl application variable list [ PROJECT-KEY APPLICATION-NAME ] [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application variable - Manage CDS application variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/keys/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl environment keys list List CDS environment keys\nSynopsis List CDS environment keys\ncdsctl environment keys list [ PROJECT-KEY ] ENV-NAME [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment keys - Manage CDS environment keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl environment list List CDS environments\nSynopsis List CDS environments\ncdsctl environment list [ PROJECT-KEY ] [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment - Manage CDS environment  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/variable/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl environment variable list List CDS environment variables\nSynopsis List CDS environment variables\ncdsctl environment variable list [ PROJECT-KEY ] ENV-NAME [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment variable - Manage CDS environment variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl group list List CDS groups\nSynopsis List CDS groups\ncdsctl group list [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl group - Manage CDS group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/pipeline/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl pipeline list List CDS pipelines\nSynopsis List CDS pipelines\ncdsctl pipeline list [ PROJECT-KEY ] [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl pipeline - Manage CDS pipeline  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/keys/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl project keys list List CDS project keys\nSynopsis List CDS project keys\ncdsctl project keys list PROJECT-KEY [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project keys - Manage CDS project keys  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl project list List CDS projects\nSynopsis List CDS projects\ncdsctl project list [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project - Manage CDS project  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/variable/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl project variable list List CDS project variables\nSynopsis List CDS project variables\ncdsctl project variable list [ PROJECT-KEY ] ENV-NAME [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project variable - Manage CDS project variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/token/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl token list List tokens from group\nSynopsis You can list tokens linked to a groups to know the id of a token to delete it or know the creator of this token.\nPay attention, if you mention a group, you must be an administrator of the group to launch this command\ncdsctl token list [GROUPNAME] [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl token - Manage CDS group token  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/user/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl user list List CDS users\nSynopsis List CDS users\ncdsctl user list [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl user - Manage CDS user  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/worker/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl worker list List CDS workers\nSynopsis List CDS workers\ncdsctl worker list [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl worker - Manage CDS worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/worker/model/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl worker model list List CDS worker models\nSynopsis List CDS worker models\ncdsctl worker model list [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl worker model - Manage Worker Model  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/artifact/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow artifact list List artifacts of one Workflow Run\nSynopsis List artifacts of one Workflow Run\ncdsctl workflow artifact list [ PROJECT-KEY WORKFLOW-NAME ] NUMBER [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow artifact - Manage Workflow Artifact  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow list List CDS workflows\nSynopsis List CDS workflows\ncdsctl workflow list [ PROJECT-KEY ] [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for list -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/login/",
	"title": "login",
	"tags": [],
	"description": "",
	"content": " LoginUser take user credentials and creates a auth token    URL /login     Method POST   Permissions Auth: false   Code loginUserHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/login/",
	"title": "login",
	"tags": [],
	"description": "",
	"content": " cdsctl login Login to CDS\nSynopsis Login to CDS\ncdsctl login [flags]  Options  -H, --api-url string CDS API URL --env Display the commands to set up the environment for the cds client -h, --help help for login -p, --password string CDS Password -u, --username string CDS Username  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/user/me/",
	"title": "me",
	"tags": [],
	"description": "",
	"content": " cdsctl user me Show Current CDS user details\nSynopsis Show Current CDS user details\ncdsctl user me [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for me  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl user - Manage CDS user  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/worker/model/",
	"title": "model",
	"tags": [],
	"description": "",
	"content": " cdsctl worker model Manage Worker Model\nSynopsis Manage Worker Model\nOptions  -h, --help help for model  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl worker - Manage CDS worker cdsctl worker model add - cdsctl worker model add [name] [docker|openstack|vsphere] \u0026ndash;group [group] cdsctl worker model delete - Delete a CDS worker model cdsctl worker model list - List CDS worker models  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/mon/",
	"title": "mon",
	"tags": [],
	"description": "",
	"content": " GET /mon/building    URL /mon/building     Method GET   Permissions Auth: true   Code getBuildingPipelinesHandler    GET /mon/building/\u0026lt;hash\u0026gt;    URL /mon/building/\u0026lt;hash\u0026gt;     Method GET   Permissions Auth: true   Code getPipelineBuildingCommitHandler    GET /mon/db/migrate    URL /mon/db/migrate     Method GET   Permissions NeedAdmin: true - Auth: true   Code getMonDBStatusMigrateHandler    GET /mon/db/times    URL /mon/db/times     Method GET   Permissions NeedAdmin: true - Auth: true   Code getMonDBTimesDBHandler    GET /mon/metrics    URL /mon/metrics     Method GET   Permissions Auth: false   Code getMetricsHandler    GET /mon/smtp/ping    URL /mon/smtp/ping     Method GET   Permissions Auth: true - Auth: true   Code smtpPingHandler    GET /mon/status    URL /mon/status     Method GET   Permissions Auth: false   Code statusHandler    GET /mon/warning    URL /mon/warning     Method GET   Permissions Auth: true   Code getUserWarningsHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/monitoring/",
	"title": "monitoring",
	"tags": [],
	"description": "",
	"content": " cdsctl monitoring CDS monitoring\nSynopsis CDS monitoring\ncdsctl monitoring [flags]  Options  -h, --help help for monitoring  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/navbar/",
	"title": "navbar",
	"tags": [],
	"description": "",
	"content": " GET /navbar    URL /navbar     Method GET   Permissions Auth: true   Code getNavbarHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/config/new/",
	"title": "new",
	"tags": [],
	"description": "",
	"content": " engine config new CDS configuration file assistant\nSynopsis Comming soon\u0026hellip;\nengine config new [flags]  Options  --env Print configuration as environment variable -h, --help help for new  SEE ALSO  engine config - Manage CDS Configuration  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/notification/",
	"title": "notification",
	"tags": [],
	"description": "",
	"content": " GET /notification/state    URL /notification/state     Method GET   Permissions Auth: true   Code getUserNotificationStateValueHandler    GET /notification/type    URL /notification/type     Method GET   Permissions Auth: true   Code getUserNotificationTypeHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/advanced/number/",
	"title": "number",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow advanced number Manage Workflow Run Number\nSynopsis Manage Workflow Run Number\nOptions  -h, --help help for number  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow advanced - Manage Workflow Advanced cdsctl workflow advanced number set - Set a Workflow Run Number cdsctl workflow advanced number show - Show a Workflow Run Number  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/parameter/",
	"title": "parameter",
	"tags": [],
	"description": "",
	"content": " GET /parameter/type    URL /parameter/type     Method GET   Permissions Auth: true   Code getParameterTypeHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/pipeline/",
	"title": "pipeline",
	"tags": [],
	"description": "",
	"content": " GET /pipeline/type    URL /pipeline/type     Method GET   Permissions Auth: true   Code getPipelineTypeHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/pipeline/",
	"title": "pipeline",
	"tags": [],
	"description": "",
	"content": " cdsctl pipeline Manage CDS pipeline\nSynopsis Manage CDS pipeline\nOptions  -h, --help help for pipeline  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl pipeline create - Create a CDS pipeline cdsctl pipeline delete - Delete a CDS pipeline cdsctl pipeline export - Export CDS pipeline cdsctl pipeline group - Manage CDS group linked to a pipeline cdsctl pipeline import - Import CDS pipeline cdsctl pipeline list - List CDS pipelines  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/platform/",
	"title": "platform",
	"tags": [],
	"description": "",
	"content": " GET /platform/models    URL /platform/models     Method GET   Permissions Auth: true   Code getPlatformModels    "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/plugin/",
	"title": "plugin",
	"tags": [],
	"description": "",
	"content": " POST /plugin    URL /plugin     Method POST   Permissions NeedAdmin: true - Auth: true   Code addPluginHandler    PUT /plugin    URL /plugin     Method PUT   Permissions NeedAdmin: true - Auth: true   Code updatePluginHandler    DELETE /plugin/\u0026lt;name\u0026gt;    URL /plugin/\u0026lt;name\u0026gt;     Method DELETE   Permissions NeedAdmin: true - Auth: true   Code deletePluginHandler    GET /plugin/download/\u0026lt;name\u0026gt;    URL /plugin/download/\u0026lt;name\u0026gt;     Method GET   Permissions Auth: true   Code downloadPluginHandler    "
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/plugins/plugin-download/",
	"title": "plugin-download",
	"tags": [],
	"description": "",
	"content": " This is a plugin to download file from URL\nParameters  filepath: the destination of your file to be copied headers: specific headers to add to your request (\u0026ldquo;headerName\u0026rdquo;=\u0026ldquo;value\u0026rdquo; newline separated list) url: the url of your file  More More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/plugins/plugin-group-tmpl/",
	"title": "plugin-group-tmpl",
	"tags": [],
	"description": "",
	"content": " This actions helps you generate a marathon group application file. It takes a config template file as a single application, and creates the group with the variables specified for each application in the applications files. Check documentation on text/template for more information https://golang.org/pkg/text/template.\nParameters  applications: Applications file variables config: Template file to use output: Output path for generated file (default to .out or just trimming .tpl extension)  More More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/plugins/plugin-kafka-publish/",
	"title": "plugin-kafka-publish",
	"tags": [],
	"description": "",
	"content": " This action helps you to send data through Kafka across every network.\nYou are able to send a custom \u0026quot;message\u0026quot; file and all the artifacts you want: there is no file size limit. To improve security, you can encrypt the files content with a GPG Key. From the consumer side, you will need to decrypt files content with you GPG private key and your passphrase. This action is a CDS Plugin packaged as a single binary file you can download and use to listen and consume data coming from CDS through Kafka. CDS can also wait for an acknowledgement coming from the consumer side. To send the acknowledgement, you can again use the plugin binary. For more details, see readme file of the plugin.  Parameters  artifacts: Artifacts list (comma separated) kafkaAddresses: Kafka Addresses kafkaGroup: Kafka Consumer Group (used for acknowledgment) kafkaPassword: Kafka Password kafkaUser: Kafka User message: Kafka Message publicKey: GPG Public Key (ASCII armored format) topic: Kafka Topic waitForAck: Wait for Ack waitForAckTimeout: Ack timeout (seconds). Used only if \u0026ldquo;waitForAck\u0026rdquo; is true. waitForAckTopic: Kafka Topic. Used only if \u0026ldquo;waitForAck\u0026rdquo; is true.  More More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/plugins/plugin-marathon/",
	"title": "plugin-marathon",
	"tags": [],
	"description": "",
	"content": " This action helps you to deploy on Mesos/Marathon. Provide a marathon.json file to configure deployment.\nYour marathon.json file can be templated with cds variables \u0026ldquo;{{.cds.variables}}\u0026rdquo;. Enable \u0026ldquo;waitForDeployment\u0026rdquo; option to ensure deployment is successful.\nParameters  configuration: Marathon application configuration file (json format) insecureSkipVerify: Skip SSL Verify if you want to use self-signed certificate password: Marathon Password (please use project, application or environment variables) timeout: Marathon deployment timeout (seconds). Used only if \u0026ldquo;waitForDeployment\u0026rdquo; is true. url: Marathon URL http://127.0.0.1:8081,http://127.0.0.1:8082,http://127.0.0.1:8083 user: Marathon User (please use project, application or environment variables) waitForDeployment: Wait for instances deployment. If set, CDS will wait for all instances to be deployed until timeout is over. All instances deployment must be done to get a successful result. If not set, CDS will consider a successful result if marathon accepts the provided configuration.  More More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/plugins/plugin-ssh-cmd/",
	"title": "plugin-ssh-cmd",
	"tags": [],
	"description": "",
	"content": " This plugin helps you to run cmd on remote server over ssh.\nParameters  command: Command commandTimeout: Command Timeout (seconds) hostnames: Hostnames (comma separated values) privateKey: SSH RSA private key timeout: Timeout (seconds) username: Username  More More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/plugins/plugin-tmpl/",
	"title": "plugin-tmpl",
	"tags": [],
	"description": "",
	"content": " This action helps you generates a file using a template file and text/template golang package.\nCheck documentation on text/template for more information https://golang.org/pkg/text/template.\nParameters  file: Template file to use output: Output path for generated file (default to .out or just trimming .tpl extension) params: Parameters to pass on the template file (key=value newline separated list)  More More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/workflows/pipelines/actions/plugins/plugin-venom/",
	"title": "plugin-venom",
	"tags": [],
	"description": "",
	"content": " This plugin helps you to run venom. Venom: https://github.com/ovh/venom.\nAdd an extra step of type junit on your job to view tests results on CDS UI.\nParameters  details: Output Details Level: low, medium, high exclude: Exclude some files, one file per line loglevel: Log Level: debug, info, warn or error output: Directory where output xunit result file parallel: Launch Test Suites in parallel. Enter here number of routines path: Path containers yml venom files. Format: adirectory/, ./aTest.yml, ./foo/b/*/z.yml vars: Empty: all {{.cds\u0026hellip;}} vars will be rewrited. Otherwise, you can limit rewrite to some variables. Example, enter cds.app.yourvar,cds.build.foo,myvar=foo to rewrite {{.cds.app.yourvar}}, {{.cds.build.foo}} and {{.foo}}. Default: Empty vars-from-file: filename.yaml or filename.json. See https://github.com/ovh/venom#run-venom-with-file-var  More More documentation on Github\n"
},
{
	"uri": "https://ovh.github.io/cds/cli/api/project/",
	"title": "project",
	"tags": [],
	"description": "",
	"content": " GET /project    URL /project     Method GET   Permissions Auth: true   Code getProjectsHandler    POST /project    URL /project     Method POST   Permissions Auth: true   Code addProjectHandler    DELETE /project/\u0026lt;project-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteProjectHandler    PUT /project/\u0026lt;project-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;     Method PUT   Permissions Auth: true   Code updateProjectHandler    GET /project/\u0026lt;project-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;     Method GET   Permissions Auth: true   Code getProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/all/keys    URL /project/\u0026lt;project-key\u0026gt;/all/keys     Method GET   Permissions Auth: true   Code getAllKeysProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;     Method GET   Permissions Auth: true   Code getApplicationHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;     Method PUT   Permissions Auth: true   Code updateApplicationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/branches    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/branches     Method GET   Permissions Auth: true   Code getApplicationBranchHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/clone    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/clone     Method POST   Permissions Auth: true   Code cloneApplicationHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/group    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/group     Method POST   Permissions Auth: true   Code addGroupInApplicationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/group/\u0026lt;group\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/group/\u0026lt;group\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteGroupFromApplicationHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/group/\u0026lt;group\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/group/\u0026lt;group\u0026gt;     Method PUT   Permissions Auth: true   Code updateGroupRoleOnApplicationHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/group/import    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/group/import     Method POST   Permissions Auth: true   Code importGroupsInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/history/branch    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/history/branch     Method GET   Permissions Auth: true   Code getPipelineBuildBranchHistoryHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/history/env/deploy    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/history/env/deploy     Method GET   Permissions Auth: true   Code getApplicationDeployHistoryHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/hook    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/hook     Method GET   Permissions Auth: true   Code getApplicationHooksHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys     Method POST   Permissions Auth: true   Code addKeyInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys     Method GET   Permissions Auth: true   Code getKeysInApplicationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteKeyInApplicationHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/notifications    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/notifications     Method POST   Permissions Auth: true   Code addNotificationsHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline     Method GET   Permissions Auth: true   Code getPipelinesInApplicationHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline     Method PUT   Permissions Auth: true   Code updatePipelinesToApplicationHandler    Deprecated    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;     Method POST   Permissions Auth: true   Code attachPipelineToApplicationHandler    DEPRECATED    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;     Method PUT   Permissions Auth: true   Code updatePipelineToApplicationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;     Method DELETE   Permissions Auth: true   Code removePipelineFromApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/\u0026lt;buildNumber\u0026gt;/artifact    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/\u0026lt;buildNumber\u0026gt;/artifact     Method GET   Permissions Auth: true   Code listArtifactsBuildHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/\u0026lt;buildNumber\u0026gt;/artifact/\u0026lt;tag\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/\u0026lt;buildNumber\u0026gt;/artifact/\u0026lt;tag\u0026gt;     Method POSTEXECUTE   Permissions Auth: true   Code uploadArtifactHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/\u0026lt;buildNumber\u0026gt;/artifact/\u0026lt;tag\u0026gt;/url    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/\u0026lt;buildNumber\u0026gt;/artifact/\u0026lt;tag\u0026gt;/url     Method POSTEXECUTE   Permissions Auth: true   Code postArtifactWithTempURLHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/\u0026lt;buildNumber\u0026gt;/artifact/\u0026lt;tag\u0026gt;/url/callback    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/\u0026lt;buildNumber\u0026gt;/artifact/\u0026lt;tag\u0026gt;/url/callback     Method POSTEXECUTE   Permissions Auth: true   Code postArtifactWithTempURLCallbackHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/artifact/\u0026lt;tag\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/artifact/\u0026lt;tag\u0026gt;     Method GET   Permissions Auth: true   Code listArtifactsHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/artifact/download/\u0026lt;id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/artifact/download/\u0026lt;id\u0026gt;     Method GET   Permissions Auth: true   Code downloadArtifactHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteBuildHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;     Method GET   Permissions Auth: true   Code getBuildStateHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/action/\u0026lt;actionID\u0026gt;/log    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/action/\u0026lt;actionID\u0026gt;/log     Method GET   Permissions Auth: true   Code getPipelineBuildJobLogsHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/action/\u0026lt;actionID\u0026gt;/step/\u0026lt;stepOrder\u0026gt;/log    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/action/\u0026lt;actionID\u0026gt;/step/\u0026lt;stepOrder\u0026gt;/log     Method GET   Permissions Auth: true   Code getStepBuildLogsHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/commits    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/commits     Method GET   Permissions Auth: true   Code getPipelineBuildCommitsHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/log    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/log     Method GET   Permissions Auth: true   Code getBuildLogsHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/restart    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/restart     Method POSTEXECUTE   Permissions Auth: true   Code restartPipelineBuildHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/stop    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/stop     Method POSTEXECUTE   Permissions Auth: true   Code stopPipelineBuildHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/test    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/test     Method POSTEXECUTE   Permissions Auth: true   Code addBuildTestResultsHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/test    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/test     Method GET   Permissions Auth: true   Code getBuildTestResultsHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/triggered    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/triggered     Method GET   Permissions Auth: true   Code getPipelineBuildTriggeredHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/variable    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/build/\u0026lt;build\u0026gt;/variable     Method POSTEXECUTE   Permissions Auth: true   Code addBuildVariableHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/commits    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/commits     Method GET   Permissions Auth: true   Code getPipelineCommitsHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/history    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/history     Method GET   Permissions Auth: true   Code getPipelineHistoryHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/hook    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/hook     Method POST   Permissions Auth: true   Code addHookHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/hook    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/hook     Method GET   Permissions Auth: true   Code getHooksHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/hook/\u0026lt;id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/hook/\u0026lt;id\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteHookHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/hook/\u0026lt;id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/hook/\u0026lt;id\u0026gt;     Method PUT   Permissions Auth: true   Code updateHookHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/notification    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/notification     Method PUT   Permissions Auth: true   Code updateUserNotificationApplicationPipelineHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/notification    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/notification     Method DELETE   Permissions Auth: true   Code deleteUserNotificationApplicationPipelineHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/notification    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/notification     Method GET   Permissions Auth: true   Code getUserNotificationApplicationPipelineHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/polling    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/polling     Method PUT   Permissions Auth: true   Code updatePollerHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/polling    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/polling     Method DELETE   Permissions Auth: true   Code deletePollerHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/polling    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/polling     Method POST   Permissions Auth: true   Code addPollerHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/polling    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/polling     Method GET   Permissions Auth: true   Code getPollersHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/run    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/run     Method POSTEXECUTE   Permissions Auth: true   Code runPipelineHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/runwithlastparent    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/runwithlastparent     Method POSTEXECUTE   Permissions Auth: true   Code runPipelineWithLastParentHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/scheduler    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/scheduler     Method POST   Permissions Auth: true   Code addSchedulerApplicationPipelineHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/scheduler    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/scheduler     Method GET   Permissions Auth: true   Code getSchedulerApplicationPipelineHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/scheduler    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/scheduler     Method PUT   Permissions Auth: true   Code updateSchedulerApplicationPipelineHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/scheduler/\u0026lt;id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/scheduler/\u0026lt;id\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteSchedulerApplicationPipelineHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger     Method POST   Permissions Auth: true   Code addTriggerHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger     Method GET   Permissions Auth: true   Code getTriggersHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger/\u0026lt;id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger/\u0026lt;id\u0026gt;     Method PUT   Permissions Auth: true   Code updateTriggerHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger/\u0026lt;id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger/\u0026lt;id\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteTriggerHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger/\u0026lt;id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger/\u0026lt;id\u0026gt;     Method GET   Permissions Auth: true   Code getTriggerHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger/source    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/trigger/source     Method GET   Permissions Auth: true   Code getTriggersAsSourceHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/attach    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/pipeline/attach     Method POST   Permissions Auth: true   Code attachPipelinesToApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/polling    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/polling     Method GET   Permissions Auth: true   Code getApplicationPollersHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/remotes    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/remotes     Method GET   Permissions Auth: true   Code getApplicationRemoteHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/hook    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/hook     Method POST   Permissions Auth: true   Code addHookOnRepositoriesManagerHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/repositories_manager/hook/\u0026lt;hookId\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/repositories_manager/hook/\u0026lt;hookId\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteHookOnRepositoriesManagerHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/tree    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/tree     Method GET   Permissions Auth: true   Code getApplicationTreeHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/tree/status    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/tree/status     Method GET   Permissions Auth: true   Code getApplicationTreeStatusHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable     Method GET   Permissions Auth: true   Code getVariablesInApplicationHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method POST   Permissions Auth: true   Code addVariableInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method GET   Permissions Auth: true   Code getVariableInApplicationHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method PUT   Permissions Auth: true   Code updateVariableInApplicationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteVariableFromApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;/audit    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;/audit     Method GET   Permissions Auth: true   Code getVariableAuditInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/audit    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/audit     Method GET   Permissions Auth: true   Code getVariablesAuditInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/version    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/version     Method GET   Permissions Auth: true   Code getApplicationBranchVersionHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/workflow/clean    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/workflow/clean     Method POST   Permissions Auth: true   Code migrationApplicationWorkflowCleanHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/workflow/migrate    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/workflow/migrate     Method POST   Permissions Auth: true   Code migrationApplicationWorkflowHandler    POST /project/\u0026lt;project-key\u0026gt;/applications    URL /project/\u0026lt;project-key\u0026gt;/applications     Method POST   Permissions Auth: true   Code addApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/applications    URL /project/\u0026lt;project-key\u0026gt;/applications     Method GET   Permissions Auth: true   Code getApplicationsHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/cache/\u0026lt;tag\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/cache/\u0026lt;tag\u0026gt;     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postPushCacheHandler    GET /project/\u0026lt;project-key\u0026gt;/cache/\u0026lt;tag\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/cache/\u0026lt;tag\u0026gt;     Method GET   Permissions NeedWorker: - Auth: true   Code getPullCacheHandler    POST /project/\u0026lt;project-key\u0026gt;/encrypt    URL /project/\u0026lt;project-key\u0026gt;/encrypt     Method POST   Permissions Auth: true   Code postEncryptVariableHandler    Deprecated    URL /project/\u0026lt;project-key\u0026gt;/environment     Method PUT   Permissions Auth: true   Code updateEnvironmentsHandler    GET /project/\u0026lt;project-key\u0026gt;/environment    URL /project/\u0026lt;project-key\u0026gt;/environment     Method GET   Permissions Auth: true   Code getEnvironmentsHandler    POST /project/\u0026lt;project-key\u0026gt;/environment    URL /project/\u0026lt;project-key\u0026gt;/environment     Method POST   Permissions Auth: true   Code addEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;     Method GET   Permissions Auth: true   Code getEnvironmentHandler    PUT /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;     Method PUT   Permissions Auth: true   Code updateEnvironmentHandler    DELETE /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteEnvironmentHandler    Deprecated    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/audit     Method GET   Permissions Auth: true   Code getEnvironmentsAuditHandler    Deprecated    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/audit/\u0026lt;auditID\u0026gt;     Method PUT   Permissions Auth: true   Code restoreEnvironmentAuditHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/clone/\u0026lt;cloneName\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/clone/\u0026lt;cloneName\u0026gt;     Method POST   Permissions Auth: true   Code cloneEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/group    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/group     Method POST   Permissions Auth: true   Code addGroupInEnvironmentHandler    DELETE /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/group/\u0026lt;group\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/group/\u0026lt;group\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteGroupFromEnvironmentHandler    PUT /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/group/\u0026lt;group\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/group/\u0026lt;group\u0026gt;     Method PUT   Permissions Auth: true   Code updateGroupRoleOnEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/group/import    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/group/import     Method POST   Permissions Auth: true   Code importGroupsInEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/groups    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/groups     Method POST   Permissions Auth: true   Code addGroupsInEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys     Method POST   Permissions Auth: true   Code addKeyInEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys     Method GET   Permissions Auth: true   Code getKeysInEnvironmentHandler    DELETE /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteKeyInEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/usage    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/usage     Method GET   Permissions Auth: true   Code getEnvironmentUsageHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable     Method GET   Permissions Auth: true   Code getVariablesInEnvironmentHandler    PUT /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method PUT   Permissions Auth: true   Code updateVariableInEnvironmentHandler    DELETE /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteVariableFromEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method GET   Permissions Auth: true   Code getVariableInEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method POST   Permissions Auth: true   Code addVariableInEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;/audit    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;/audit     Method GET   Permissions Auth: true   Code getVariableAuditInEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/import    URL /project/\u0026lt;project-key\u0026gt;/environment/import     Method POST   Permissions Auth: true   Code importNewEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/import/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/import/\u0026lt;environment-name\u0026gt;     Method POST   Permissions Auth: true   Code importIntoEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/export/application/\u0026lt;application-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/export/application/\u0026lt;application-name\u0026gt;     Method GET   Permissions Auth: true   Code getApplicationExportHandler    GET /project/\u0026lt;project-key\u0026gt;/export/environment/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/export/environment/\u0026lt;environment-name\u0026gt;     Method GET   Permissions Auth: true   Code getEnvironmentExportHandler    GET /project/\u0026lt;project-key\u0026gt;/export/pipeline/\u0026lt;pipeline-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/export/pipeline/\u0026lt;pipeline-name\u0026gt;     Method GET   Permissions Auth: true   Code getPipelineExportHandler    GET /project/\u0026lt;project-key\u0026gt;/export/workflows/\u0026lt;workflow-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/export/workflows/\u0026lt;workflow-name\u0026gt;     Method GET   Permissions Auth: true   Code getWorkflowExportHandler    POST /project/\u0026lt;project-key\u0026gt;/group    URL /project/\u0026lt;project-key\u0026gt;/group     Method POST   Permissions Auth: true   Code addGroupInProjectHandler    DELETE /project/\u0026lt;project-key\u0026gt;/group/\u0026lt;group\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/group/\u0026lt;group\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteGroupFromProjectHandler    PUT /project/\u0026lt;project-key\u0026gt;/group/\u0026lt;group\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/group/\u0026lt;group\u0026gt;     Method PUT   Permissions Auth: true   Code updateGroupRoleOnProjectHandler    POST /project/\u0026lt;project-key\u0026gt;/group/import    URL /project/\u0026lt;project-key\u0026gt;/group/import     Method POST   Permissions Auth: true   Code importGroupsInProjectHandler    POST /project/\u0026lt;project-key\u0026gt;/import/application    URL /project/\u0026lt;project-key\u0026gt;/import/application     Method POST   Permissions Auth: true   Code postApplicationImportHandler    import an environment yml file    URL /project/\u0026lt;project-key\u0026gt;/import/environment     Method POST   Query Parameter force=true or false. If false and if the environment already exists, raise an error   Permissions Auth: true   Code postEnvironmentImportHandler    Description import an environment yml file with cdsctl environment import myenv.env.yml\nPOST /project/\u0026lt;project-key\u0026gt;/import/pipeline    URL /project/\u0026lt;project-key\u0026gt;/import/pipeline     Method POST   Permissions Auth: true   Code importPipelineHandler    POST /project/\u0026lt;project-key\u0026gt;/import/workflows    URL /project/\u0026lt;project-key\u0026gt;/import/workflows     Method POST   Permissions Auth: true   Code postWorkflowImportHandler    GET /project/\u0026lt;project-key\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/keys     Method GET   Permissions Auth: true   Code getKeysInProjectHandler    POST /project/\u0026lt;project-key\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/keys     Method POST   Permissions Auth: true   Code addKeyInProjectHandler    DELETE /project/\u0026lt;project-key\u0026gt;/keys/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/keys/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteKeyInProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/notifications    URL /project/\u0026lt;project-key\u0026gt;/notifications     Method GET   Permissions Auth: true   Code getProjectNotificationsHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline    URL /project/\u0026lt;project-key\u0026gt;/pipeline     Method POST   Permissions Auth: true   Code addPipelineHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline    URL /project/\u0026lt;project-key\u0026gt;/pipeline     Method GET   Permissions Auth: true   Code getPipelinesHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;     Method GET   Permissions Auth: true   Code getPipelineHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;     Method PUT   Permissions Auth: true   Code updatePipelineHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;     Method DELETE   Permissions Auth: true   Code deletePipelineHandler    DEPRECATED    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/action/\u0026lt;jobID\u0026gt;     Method PUT   Permissions Auth: true   Code updatePipelineActionHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/action/\u0026lt;jobID\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/action/\u0026lt;jobID\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteJobHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/application    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/application     Method GET   Permissions Auth: true   Code getApplicationUsingPipelineHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/audits    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/audits     Method GET   Permissions Auth: true   Code getPipelineAuditHandler    DEPRECATED    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/group     Method PUT   Permissions Auth: true   Code updateGroupsOnPipelineHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/group    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/group     Method POST   Permissions Auth: true   Code addGroupInPipelineHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/group/\u0026lt;group\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/group/\u0026lt;group\u0026gt;     Method PUT   Permissions Auth: true   Code updateGroupRoleOnPipelineHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/group/\u0026lt;group\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/group/\u0026lt;group\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteGroupFromPipelineHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/group/import    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/group/import     Method POST   Permissions Auth: true   Code importGroupsInPipelineHandler    Deprecated    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/parameter     Method PUT   Permissions Auth: true   Code updateParametersInPipelineHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/parameter    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/parameter     Method GET   Permissions Auth: true   Code getParametersInPipelineHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/parameter/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/parameter/\u0026lt;name\u0026gt;     Method POST   Permissions Auth: true   Code addParameterInPipelineHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/parameter/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/parameter/\u0026lt;name\u0026gt;     Method PUT   Permissions Auth: true   Code updateParameterInPipelineHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/parameter/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/parameter/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteParameterFromPipelineHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage     Method POST   Permissions Auth: true   Code addStageHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;     Method PUT   Permissions Auth: true   Code updateStageHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;     Method GET   Permissions Auth: true   Code getStageHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteStageHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/job    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/job     Method POST   Permissions Auth: true   Code addJobToStageHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/job/\u0026lt;jobID\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/job/\u0026lt;jobID\u0026gt;     Method PUT   Permissions Auth: true   Code updateJobHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined     Method POST   Permissions Auth: true   Code addJobToPipelineHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined/\u0026lt;actionID\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined/\u0026lt;actionID\u0026gt;     Method GET   Permissions Auth: true   Code getJoinedActionHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined/\u0026lt;actionID\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined/\u0026lt;actionID\u0026gt;     Method PUT   Permissions Auth: true   Code updateJoinedActionHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined/\u0026lt;actionID\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined/\u0026lt;actionID\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteJoinedActionHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined/\u0026lt;actionID\u0026gt;/audit    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/\u0026lt;stageID\u0026gt;/joined/\u0026lt;actionID\u0026gt;/audit     Method GET   Permissions Auth: true   Code getJoinedActionAuditHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/move    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-name\u0026gt;/stage/move     Method POST   Permissions Auth: true   Code moveStageHandler    POST /project/\u0026lt;project-key\u0026gt;/platforms    URL /project/\u0026lt;project-key\u0026gt;/platforms     Method POST   Permissions Auth: true   Code postProjectPlatformHandler    GET /project/\u0026lt;project-key\u0026gt;/platforms    URL /project/\u0026lt;project-key\u0026gt;/platforms     Method GET   Permissions Auth: true   Code getProjectPlatformsHandler    PUT /project/\u0026lt;project-key\u0026gt;/platforms/\u0026lt;platformName\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/platforms/\u0026lt;platformName\u0026gt;     Method PUT   Permissions Auth: true   Code putProjectPlatformHandler    DELETE /project/\u0026lt;project-key\u0026gt;/platforms/\u0026lt;platformName\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/platforms/\u0026lt;platformName\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteProjectPlatformHandler    GET /project/\u0026lt;project-key\u0026gt;/platforms/\u0026lt;platformName\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/platforms/\u0026lt;platformName\u0026gt;     Method GET   Permissions AllowServices: true - Auth: true   Code getProjectPlatformHandler    POST /project/\u0026lt;project-key\u0026gt;/preview/workflows    URL /project/\u0026lt;project-key\u0026gt;/preview/workflows     Method POST   Permissions Auth: true   Code postWorkflowPreviewHandler    Pull is only in yaml    URL /project/\u0026lt;project-key\u0026gt;/pull/workflows/\u0026lt;workflow-name\u0026gt;     Method GET   Permissions Auth: true   Code getWorkflowPullHandler    POST /project/\u0026lt;project-key\u0026gt;/push/workflows    URL /project/\u0026lt;project-key\u0026gt;/push/workflows     Method POST   Permissions Auth: true   Code postWorkflowPushHandler    GET /project/\u0026lt;project-key\u0026gt;/repositories_manager    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager     Method GET   Permissions Auth: true   Code getRepositoriesManagerForProjectHandler    DELETE /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteRepositoriesManagerHandler    POST /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/application/\u0026lt;application-name\u0026gt;/attach    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/application/\u0026lt;application-name\u0026gt;/attach     Method POST   Permissions Auth: true   Code attachRepositoriesManagerHandler    POST /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/application/\u0026lt;application-name\u0026gt;/detach    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/application/\u0026lt;application-name\u0026gt;/detach     Method POST   Permissions Auth: true   Code detachRepositoriesManagerHandler    POST /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/authorize    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/authorize     Method POST   Permissions Auth: true   Code repositoriesManagerAuthorizeHandler    POST /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/authorize/callback    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/authorize/callback     Method POST   Permissions Auth: true   Code repositoriesManagerAuthorizeCallbackHandler    GET /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/repo    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/repo     Method GET   Permissions Auth: true   Code getRepoFromRepositoriesManagerHandler    GET /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/repos    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/repos     Method GET   Permissions Auth: true   Code getReposFromRepositoriesManagerHandler    GET /project/\u0026lt;project-key\u0026gt;/runs    URL /project/\u0026lt;project-key\u0026gt;/runs     Method GET   Permissions Auth: true   Code getWorkflowAllRunsHandler    GET /project/\u0026lt;project-key\u0026gt;/variable    URL /project/\u0026lt;project-key\u0026gt;/variable     Method GET   Permissions Auth: true   Code getVariablesInProjectHandler    PUT /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;     Method PUT   Permissions Auth: true   Code updateVariableInProjectHandler    POST /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;     Method POST   Permissions Auth: true   Code addVariableInProjectHandler    DELETE /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteVariableFromProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;/audit    URL /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;/audit     Method GET   Permissions Auth: true   Code getVariableAuditInProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/variable/audit    URL /project/\u0026lt;project-key\u0026gt;/variable/audit     Method GET   Permissions Auth: true   Code getVariablesAuditInProjectnHandler    GET /project/\u0026lt;project-key\u0026gt;/workflow/\u0026lt;workflow-name\u0026gt;/node/\u0026lt;nodeID\u0026gt;/hook/model    URL /project/\u0026lt;project-key\u0026gt;/workflow/\u0026lt;workflow-name\u0026gt;/node/\u0026lt;nodeID\u0026gt;/hook/model     Method GET   Permissions Auth: true   Code getWorkflowHookModelsHandler    getWorkflows returns ID and name of workflows for a given project/user    URL /project/\u0026lt;project-key\u0026gt;/workflows     Method GET   Permissions Auth: true   Code getWorkflowsHandler    postWorkflow creates a new workflow    URL /project/\u0026lt;project-key\u0026gt;/workflows     Method POST   Permissions Auth: true   Code postWorkflowHandler    putWorkflow deletes a workflow    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteWorkflowHandler    putWorkflow updates a workflow    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;     Method PUT   Permissions Auth: true   Code putWorkflowHandler    getWorkflow returns a full workflow    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;     Method GET   Permissions Auth: true   Code getWorkflowHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/artifact/\u0026lt;artifactId\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/artifact/\u0026lt;artifactId\u0026gt;     Method GET   Permissions Auth: true   Code getDownloadArtifactHandler    postWorkflowGroup add permission for a group on the workflow    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/groups     Method POST   Permissions Auth: true   Code postWorkflowGroupHandler    putWorkflowGroup update permission for a group on the workflow    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/groups/\u0026lt;group-name\u0026gt;     Method PUT   Permissions Auth: true   Code putWorkflowGroupHandler    deleteWorkflowGroup delete permission for a group on the workflow    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/groups/\u0026lt;group-name\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteWorkflowGroupHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/hooks/\u0026lt;uuid\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/hooks/\u0026lt;uuid\u0026gt;     Method GET   Permissions Auth: true   Code getWorkflowHookHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/node/\u0026lt;nodeID\u0026gt;/triggers/condition    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/node/\u0026lt;nodeID\u0026gt;/triggers/condition     Method GET   Permissions Auth: true   Code getWorkflowTriggerConditionHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs     Method POSTEXECUTE   Permissions AllowServices: true - Auth: true   Code postWorkflowRunHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs     Method GET   Permissions Auth: true   Code getWorkflowRunsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;     Method GET   Permissions Auth: true   Code getWorkflowRunHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/\u0026lt;nodeName\u0026gt;/commits    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/\u0026lt;nodeName\u0026gt;/commits     Method GET   Permissions Auth: true   Code getWorkflowCommitsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/artifacts    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/artifacts     Method GET   Permissions Auth: true   Code getWorkflowRunArtifactsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;nodeID\u0026gt;/history    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;nodeID\u0026gt;/history     Method GET   Permissions Auth: true   Code getWorkflowNodeRunHistoryHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id     Method GET   Permissions Auth: true   Code getWorkflowNodeRunHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id/artifacts    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id/artifacts     Method GET   Permissions Auth: true   Code getWorkflowNodeRunArtifactsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id/job/\u0026lt;runJobId\u0026gt;/step/\u0026lt;stepOrder\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id/job/\u0026lt;runJobId\u0026gt;/step/\u0026lt;stepOrder\u0026gt;     Method GET   Permissions Auth: true   Code getWorkflowNodeRunJobStepHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id/release    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id/release     Method POST   Permissions Auth: true   Code releaseApplicationWorkflowHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id/stop    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/node-run-id/stop     Method POSTEXECUTE   Permissions Auth: true   Code stopWorkflowNodeRunHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/resync    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/resync     Method POST   Permissions Auth: true   Code resyncWorkflowRunHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/stop    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/stop     Method POSTEXECUTE   Permissions Auth: true   Code stopWorkflowRunHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/latest    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/latest     Method GET   Permissions Auth: true   Code getLatestWorkflowRunHandler    postWorkflowRunNum updates the current run number for the given workflow    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/num     Method POST   Permissions Auth: true   Code postWorkflowRunNumHandler    getWorkflowRunNum returns the last run number for the given workflow    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/num     Method GET   Permissions Auth: true   Code getWorkflowRunNumHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/tags    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/tags     Method GET   Permissions Auth: true   Code getWorkflowRunTagsHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/",
	"title": "project",
	"tags": [],
	"description": "",
	"content": " cdsctl project Manage CDS project\nSynopsis Manage CDS project\nOptions  -h, --help help for project  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl project create - Create a CDS project cdsctl project delete - Delete a CDS project cdsctl project group - Manage CDS group linked to a project cdsctl project keys - Manage CDS project keys cdsctl project list - List CDS projects cdsctl project show - Show a CDS project cdsctl project variable - Manage CDS project variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/pull/",
	"title": "pull",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow pull Pull a workflow\nSynopsis Pull a workflow\ncdsctl workflow pull [ PROJECT-KEY WORKFLOW-NAME ] [flags]  Options  --force Force, may override files -h, --help help for pull -d, --output-dir string Output directory (default \u0026quot;.cds\u0026quot;) --quiet If true, do not output filename created --with-permissions Export permissions  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/cache/pull/",
	"title": "pull",
	"tags": [],
	"description": "",
	"content": " worker cache pull worker cache pull tagValue\nSynopsis Inside a project, you can fetch a cache from your worker with a tag\nworker pull \u0026lt;tagValue\u0026gt;  If you push a cache with:\nworker cache push latest {{.cds.workspace}}/pathToUpload  The command:\nworker cache pull latest  will create the directory {{.cds.workspace}}/pathToUpload with the content of the cache\nworker cache pull [flags]  Options  -h, --help help for pull  SEE ALSO  worker cache - Inside a project, you can create or retrieve a cache from your worker with a tag  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/push/",
	"title": "push",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow push Push a workflow\nSynopsis Useful when you want to push a workflow and his dependencies (pipelines, applications, environments)\nFor example if you have a workflow with pipelines build and tests you can push your workflow and pipelines with\ncdsctl workflow push tests.pip.yml build.pip.yml myWorkflow.yml  cdsctl workflow push [ PROJECT-KEY ] YAML-FILE ... [flags]  Options  -h, --help help for push --skip-update-files Useful if you don't want to update yaml files after pushing the workflow.  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/cache/push/",
	"title": "push",
	"tags": [],
	"description": "",
	"content": " worker cache push worker cache push tagValue {{.cds.workspace}}/pathToUpload\nSynopsis Inside a project, you can create a cache from your worker with a tag (useful for vendors for example) worker push  dir/file\nworker cache push [flags]  Examples worker cache push {{.cds.workflow}}-{{.cds.version}} {{.cds.workspace}}/pathToUpload  Options  -h, --help help for push  SEE ALSO  worker cache - Inside a project, you can create or retrieve a cache from your worker with a tag  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/queue/",
	"title": "queue",
	"tags": [],
	"description": "",
	"content": " GET /queue    URL /queue     Method GET   Permissions Auth: true   Code getQueueHandler    POST /queue/\u0026lt;id\u0026gt;/book    URL /queue/\u0026lt;id\u0026gt;/book     Method POST   Permissions NeedHatchery: - Auth: true   Code bookPipelineBuildJobHandler    GET /queue/\u0026lt;id\u0026gt;/infos    URL /queue/\u0026lt;id\u0026gt;/infos     Method GET   Permissions Auth: true   Code getPipelineBuildJobHandler    POST /queue/\u0026lt;id\u0026gt;/result    URL /queue/\u0026lt;id\u0026gt;/result     Method POST   Permissions Auth: true   Code addQueueResultHandler    POST /queue/\u0026lt;id\u0026gt;/spawn/infos    URL /queue/\u0026lt;id\u0026gt;/spawn/infos     Method POST   Permissions NeedWorker: - NeedHatchery: - Auth: true   Code addSpawnInfosPipelineBuildJobHandler    POST /queue/\u0026lt;id\u0026gt;/take    URL /queue/\u0026lt;id\u0026gt;/take     Method POST   Permissions Auth: true   Code takePipelineBuildJobHandler    GET /queue/workflows    URL /queue/workflows     Method GET   Permissions Auth: true   Code getWorkflowJobQueueHandler    POST /queue/workflows/\u0026lt;id\u0026gt;/attempt    URL /queue/workflows/\u0026lt;id\u0026gt;/attempt     Method POST   Permissions NeedHatchery: - Auth: true   Code postIncWorkflowJobAttemptHandler    POST /queue/workflows/\u0026lt;id\u0026gt;/book    URL /queue/workflows/\u0026lt;id\u0026gt;/book     Method POST   Permissions NeedHatchery: - Auth: true   Code postBookWorkflowJobHandler    GET /queue/workflows/\u0026lt;id\u0026gt;/infos    URL /queue/workflows/\u0026lt;id\u0026gt;/infos     Method GET   Permissions NeedWorker: - Auth: true   Code getWorkflowJobHandler    POST /queue/workflows/\u0026lt;id\u0026gt;/spawn/infos    URL /queue/workflows/\u0026lt;id\u0026gt;/spawn/infos     Method POST   Permissions NeedHatchery: - Auth: true   Code postSpawnInfosWorkflowJobHandler    POST /queue/workflows/\u0026lt;id\u0026gt;/take    URL /queue/workflows/\u0026lt;id\u0026gt;/take     Method POST   Permissions NeedWorker: - Auth: true   Code postTakeWorkflowJobHandler    POSTEXECUTE /queue/workflows/\u0026lt;token\u0026gt;/artifact/\u0026lt;tag\u0026gt;    URL /queue/workflows/\u0026lt;token\u0026gt;/artifact/\u0026lt;tag\u0026gt;     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postWorkflowJobArtifactHandler    POSTEXECUTE /queue/workflows/\u0026lt;token\u0026gt;/artifact/\u0026lt;tag\u0026gt;/url    URL /queue/workflows/\u0026lt;token\u0026gt;/artifact/\u0026lt;tag\u0026gt;/url     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postWorkflowJobArtifacWithTempURLHandler    POSTEXECUTE /queue/workflows/\u0026lt;token\u0026gt;/artifact/\u0026lt;tag\u0026gt;/url/callback    URL /queue/workflows/\u0026lt;token\u0026gt;/artifact/\u0026lt;tag\u0026gt;/url/callback     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postWorkflowJobArtifactWithTempURLCallbackHandler    POSTEXECUTE /queue/workflows/\u0026lt;token\u0026gt;/log    URL /queue/workflows/\u0026lt;token\u0026gt;/log     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postWorkflowJobLogsHandler    POSTEXECUTE /queue/workflows/\u0026lt;token\u0026gt;/result    URL /queue/workflows/\u0026lt;token\u0026gt;/result     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postWorkflowJobResultHandler    POSTEXECUTE /queue/workflows/\u0026lt;token\u0026gt;/step    URL /queue/workflows/\u0026lt;token\u0026gt;/step     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postWorkflowJobStepStatusHandler    POSTEXECUTE /queue/workflows/\u0026lt;token\u0026gt;/tag    URL /queue/workflows/\u0026lt;token\u0026gt;/tag     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postWorkflowJobTagsHandler    POSTEXECUTE /queue/workflows/\u0026lt;token\u0026gt;/test    URL /queue/workflows/\u0026lt;token\u0026gt;/test     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postWorkflowJobTestsResultsHandler    POSTEXECUTE /queue/workflows/\u0026lt;token\u0026gt;/variable    URL /queue/workflows/\u0026lt;token\u0026gt;/variable     Method POSTEXECUTE   Permissions NeedWorker: - Auth: true   Code postWorkflowJobVariableHandler    GET /queue/workflows/count    URL /queue/workflows/count     Method GET   Permissions Auth: true   Code countWorkflowJobQueueHandler    POST /queue/workflows/requirements/errors    URL /queue/workflows/requirements/errors     Method POST   Permissions NeedWorker: - Auth: true   Code postWorkflowJobRequirementsErrorHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/register/",
	"title": "register",
	"tags": [],
	"description": "",
	"content": " worker register worker register\nSynopsis worker register\nworker register [flags]  Options  --api string URL of CDS API --auto-update Auto update worker binary from CDS API --basedir string This directory (default TMPDIR os environment var) will contains worker working directory and temporary files --booked-job-id int Booked job id --booked-pb-job-id int Booked Pipeline Build job id --booked-workflow-job-id int Booked Workflow job id --force-exit If single_use=true, force exit. This is useful if it's spawned by an Hatchery (default: worker wait 30min for being killed by hatchery) --from-github Update binary from latest github release --graylog-extra-key string Ex: --graylog-extra-key=xxxx-yyyy --graylog-extra-value string Ex: --graylog-extra-value=xxxx-yyyy --graylog-host string Ex: --graylog-host=xxxx-yyyy --graylog-port string Ex: --graylog-port=12202 --graylog-protocol string Ex: --graylog-protocol=xxxx-yyyy --grpc-api string CDS GRPC tcp address --grpc-insecure Disable GRPC TLS encryption --hatchery int Hatchery ID spawing worker --hatchery-name string Hatchery Name spawing worker -h, --help help for register --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. --log-level string Log Level: debug, info, notice, warning, critical (default \u0026quot;notice\u0026quot;) --model int Model of worker --name string Name of worker --single-use Exit after executing an action --token string CDS Token --ttl int Worker time to live (minutes) (default 30)  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/user/removeadmin/",
	"title": "removeAdmin",
	"tags": [],
	"description": "",
	"content": " cdsctl group user removeAdmin Remove a user from administrators of a group\nSynopsis Remove a user from administrators of a group\ncdsctl group user removeAdmin GROUPNAME USERNAME [flags]  Options  -h, --help help for removeAdmin  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl group user - Manage CDS users group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/repositories_manager/",
	"title": "repositories_manager",
	"tags": [],
	"description": "",
	"content": " GET /repositories_manager    URL /repositories_manager     Method GET   Permissions Auth: true   Code getRepositoriesManagerHandler    GET /repositories_manager/oauth2/callback    URL /repositories_manager/oauth2/callback     Method GET   Permissions Auth: false   Code repositoriesManagerOAuthCallbackHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/requirement/",
	"title": "requirement",
	"tags": [],
	"description": "",
	"content": " GET /requirement/types/\u0026lt;type\u0026gt;    URL /requirement/types/\u0026lt;type\u0026gt;     Method GET   Permissions Auth: true   Code getRequirementTypeValuesHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/user/reset/",
	"title": "reset",
	"tags": [],
	"description": "",
	"content": " cdsctl user reset Reset CDS user password\nSynopsis Reset CDS user password\ncdsctl user reset [USERNAME] [EMAIL] [flags]  Options  -h, --help help for reset  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl user - Manage CDS user  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/run/",
	"title": "run",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow run Run a CDS workflow\nSynopsis Run a CDS workflow\ncdsctl workflow run [ PROJECT-KEY WORKFLOW-NAME ] [flags]  Options  -d, --data string Run the workflow with payload data -h, --help help for run -i, --interactive Follow the workflow run in an interactive terminal user interface --node-name string Node Name to relaunch; Flag run-number is mandatory -o, --open-web-browser Open web browser on the workflow run -p, --parameter strings Run the workflow with pipeline parameter --run-number string Existing Workflow RUN Number  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/admin/services/",
	"title": "services",
	"tags": [],
	"description": "",
	"content": " cdsctl admin services Manage CDS services\nSynopsis Manage CDS services\nOptions  -h, --help help for services  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl admin - Manage CDS (admin only) cdsctl admin services list - List CDS services  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/advanced/number/set/",
	"title": "set",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow advanced number set Set a Workflow Run Number\nSynopsis Set a Workflow Run Number\ncdsctl workflow advanced number set [ PROJECT-KEY WORKFLOW-NAME ] NUMBER [flags]  Examples cdsctl workflow advanced number set MYPROJECT my-workflow 22  Options  -h, --help help for set  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow advanced number - Manage Workflow Run Number  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/user/setadmin/",
	"title": "setAdmin",
	"tags": [],
	"description": "",
	"content": " cdsctl group user setAdmin Set a user as an administrator of a group\nSynopsis Set a user as an administrator of a group\ncdsctl group user setAdmin GROUPNAME USERNAME [flags]  Options  -h, --help help for setAdmin  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl group user - Manage CDS users group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/shell/",
	"title": "shell",
	"tags": [],
	"description": "",
	"content": " cdsctl shell cdsctl interactive shell\nSynopsis CDS Shell Mode. default commands:\n cd: reset current position. cd : go to an object. Try cd /project/ and tabulation to autocomplete find : find a project / application / workflow. not case sensitive help: display this help ls: display current list, quiet format ll: display current list mode: display current mode. Choose mode with \u0026ldquo;mode vi\u0026rdquo; ou \u0026ldquo;mode emacs\u0026rdquo; open: open CDS WebUI with current context version: same as cdsctl version command  Other commands are available depending on your position. Example, run interactively a workflow:\ncd /project/MY_PRJ_KEY/workflow/MY_WF run -i  \n\ncdsctl shell [flags]  Options  -h, --help help for shell  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/action/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": " cdsctl action show Show a CDS action\nSynopsis Useful to show a CDS action\ncdsctl action show myAction\ncdsctl action show ACTION-NAME [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for show  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl action - Manage CDS action  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": " cdsctl application show Show a CDS application\nSynopsis Show a CDS application\ncdsctl application show [ PROJECT-KEY APPLICATION-NAME ] [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for show  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application - Manage CDS application  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": " cdsctl group show Show a CDS group\nSynopsis Show a CDS group\ncdsctl group show GROUP-NAME [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for show  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl group - Manage CDS group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": " cdsctl project show Show a CDS project\nSynopsis Show a CDS project\ncdsctl project show [ PROJECT-KEY ] [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for show  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project - Manage CDS project  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/user/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": " cdsctl user show Show CDS user details\nSynopsis Show CDS user details\ncdsctl user show USERNAME [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for show  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl user - Manage CDS user  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/advanced/number/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow advanced number show Show a Workflow Run Number\nSynopsis Show a Workflow Run Number\ncdsctl workflow advanced number show [ PROJECT-KEY WORKFLOW-NAME ] [flags]  Examples cdsctl workflow advanced number show MYPROJECT my-workflow  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for show  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow advanced number - Manage Workflow Run Number  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow show Show a CDS workflow\nSynopsis Show a CDS workflow\ncdsctl workflow show [ PROJECT-KEY WORKFLOW-NAME ] [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for show  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/signup/",
	"title": "signup",
	"tags": [],
	"description": "",
	"content": " cdsctl signup Signup on CDS\nSynopsis Signup on CDS\ncdsctl signup [flags]  Options  -H, --api-url string CDS API URL --email string Email --fullname string Fullname -h, --help help for signup --username string CDS Username  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/start/",
	"title": "start",
	"tags": [],
	"description": "",
	"content": " engine start Start CDS\nSynopsis Start CDS Engine Services\nAPI This is the core component of CDS.\nHatcheries They are the components responsible for spawning workers. Supported platforms/orchestrators are:\n Local machine Openstack Docker Swarm Openstack Vsphere  Hooks This component operates CDS workflow hooks\nRepositories This component operates CDS workflow repositories\nVCS This component operates CDS VCS connectivity\nStart all of this with a single command:\n$ engine start [api] [hatchery:local] [hatchery:marathon] [hatchery:openstack] [hatchery:swarm] [hatchery:vsphere] [hooks] [vcs] [repositories]  All the services are using the same configuration file format.\nYou have to specify where the toml configuration is. It can be a local file, provided by consul or vault.\nYou can also use or override toml file with environment variable.\nSee $ engine config command for more details.\nengine start [flags]  Options  --config string config file -h, --help help for start --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default \u0026quot;cds/config.api.toml\u0026quot;) --vault-addr string (optional) Vault address to fetch secrets from vault (example: https://vault.mydomain.net:8200) --vault-token string (optional) Vault token to fetch secrets from vault  SEE ALSO  engine - CDS Engine  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/health/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": " cdsctl health status Show CDS Status\nSynopsis Show CDS Status\ncdsctl health status [flags]  Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -h, --help help for status -q, --quiet Only display object's key  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl health - Check CDS health  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow status Check the status of the run\nSynopsis Check the status of the run\ncdsctl workflow status [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] [flags]  Options  --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -h, --help help for status --track Wait the workflow to be over  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/database/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": " engine database status Show current migration status\nSynopsis Show current migration status\nengine database status [flags]  Options  --db-connect-timeout int Maximum wait for connection, in seconds (default 10) --db-host string DB Host (default \u0026quot;localhost\u0026quot;) --db-maxconn int DB Max connection (default 20) --db-name string DB Name (default \u0026quot;cds\u0026quot;) --db-password string DB Password --db-port int DB Port (default 5432) --db-sslmode string DB SSL Mode: require (default), verify-full, or disable (default \u0026quot;require\u0026quot;) --db-timeout int Statement timeout value in milliseconds (default 3000) --db-user string DB User (default \u0026quot;cds\u0026quot;) -h, --help help for status --migrate-dir string CDS SQL Migration directory (default \u0026quot;./engine/sql\u0026quot;)  SEE ALSO  engine database - Manage CDS database  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/stop/",
	"title": "stop",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow stop Stop a CDS workflow or a specific node name\nSynopsis Stop a CDS workflow or a specific node name\ncdsctl workflow stop [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] [NODE-NAME] [flags]  Examples cdsctl workflow stop # Stop the workflow run for the current repo and the current hash cdsctl workflow stop MYPROJECT myworkflow 5 # To stop a workflow run on number 5 cdsctl workflow stop MYPROJECT myworkflow 5 compile # To stop a workflow node run on workflow run 5  Options  -h, --help help for stop  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl workflow - Manage CDS workflow  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/suggest/",
	"title": "suggest",
	"tags": [],
	"description": "",
	"content": " GET /suggest/variable/\u0026lt;project-key\u0026gt;    URL /suggest/variable/\u0026lt;project-key\u0026gt;     Method GET   Permissions Auth: true   Code getVariablesHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/tag/",
	"title": "tag",
	"tags": [],
	"description": "",
	"content": " worker tag worker tag key=value key=value\nSynopsis On the workflow view, the sidebar on the left displays a select box to filter on CDS Tags.\nSo, what\u0026rsquo;s a tag? A tag is a CDS Variable, exported as a tag. There are default tags as git.branch, git.hash, tiggered_by and environment.\nInside a job, you can add a Tag with the worker command:\n# worker tag \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; worker tag tagKey=tagValue anotherTagKey=anotherTagValue  Tags are useful to add indication on the sidebar about the context of a Run.\nYou can select the tags displayed on the sidebar Workflow → Advanced → \u0026ldquo;Tags to display in the sidebar\u0026rdquo;.\nworker tag [flags]  Options  -h, --help help for tag  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/tmpl/",
	"title": "tmpl",
	"tags": [],
	"description": "",
	"content": " worker tmpl worker tmpl inputFile outputFile\nSynopsis Inside a step script (https://ovh.github.io/cds/workflows/pipelines/actions/builtin/script/), you can add a replace CDS variables with the real value into a file:\n# create a file cat \u0026lt;\u0026lt; EOF \u0026gt; myFile this a a line in the file, with a CDS variable {{.cds.version}} EOF # worker tmpl \u0026lt;input file\u0026gt; \u0026lt;output file\u0026gt; worker tmpl {{.cds.workspace}}/myFile {{.cds.workspace}}/outputFile  The file outputFile will contain the string:\nthis a a line in the file, with a CDS variable 2  if it\u0026rsquo;s the RUN n°2 of the current workflow.\nworker tmpl [flags]  Options  -h, --help help for tmpl  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/token/",
	"title": "token",
	"tags": [],
	"description": "",
	"content": " cdsctl token Manage CDS group token\nSynopsis Manage CDS group token\nOptions  -h, --help help for token  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl token delete - Delete a token linked to a group cdsctl token find - Find an existing token cdsctl token generate - Generate a new token cdsctl token list - List tokens from group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/variable/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": " cdsctl application variable update Update CDS application variable value\nSynopsis Update CDS application variable value\ncdsctl application variable update [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-OLDNAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE [flags]  Options  -h, --help help for update  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application variable - Manage CDS application variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/variable/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": " cdsctl environment variable update Update CDS environment variable value\nSynopsis Update CDS environment variable value\ncdsctl environment variable update [ PROJECT-KEY ] ENV-NAME VARIABLE-OLDNAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE [flags]  Options  -h, --help help for update  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment variable - Manage CDS environment variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/variable/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": " cdsctl project variable update Update CDS project variable value\nSynopsis Update CDS project variable value\ncdsctl project variable update [ PROJECT-KEY ] VARIABLE-OLDNAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE [flags]  Options  -h, --help help for update  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project variable - Manage CDS project variables  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": " cdsctl update Update cdsctl from CDS API or from CDS Release\nSynopsis Update cdsctl from CDS API or from CDS Release\ncdsctl update [flags]  Options  --from-github Update binary from latest github release -h, --help help for update  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": " engine update Update engine binary\nSynopsis Update engine binary\nengine update [flags]  Examples engine update --from-github  Options  --api string Update binary from a CDS Engine API --from-github Update binary from latest github release -h, --help help for update  SEE ALSO  engine - CDS Engine  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": " worker update Update worker from CDS API or from CDS Release\nSynopsis Update worker from CDS API or from CDS Release\nworker update [flags]  Options  --api string URL of CDS API --from-github Update binary from latest github release -h, --help help for update --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers.  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/database/upgrade/",
	"title": "upgrade",
	"tags": [],
	"description": "",
	"content": " engine database upgrade Upgrade schema\nSynopsis Migrates the database to the most recent version available.\nengine database upgrade [flags]  Options  --db-connect-timeout int Maximum wait for connection, in seconds (default 10) --db-host string DB Host (default \u0026quot;localhost\u0026quot;) --db-maxconn int DB Max connection (default 20) --db-name string DB Name (default \u0026quot;cds\u0026quot;) --db-password string DB Password --db-port int DB Port (default 5432) --db-sslmode string DB SSL Mode: require (default), verify-full, or disable (default \u0026quot;require\u0026quot;) --db-timeout int Statement timeout value in milliseconds (default 3000) --db-user string DB User (default \u0026quot;cds\u0026quot;) --dry-run Dry run upgrade -h, --help help for upgrade --limit int Max number of migrations to apply (0 = unlimited) --migrate-dir string CDS SQL Migration directory (default \u0026quot;./engine/sql\u0026quot;)  SEE ALSO  engine database - Manage CDS database  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/upload/",
	"title": "upload",
	"tags": [],
	"description": "",
	"content": " worker upload worker upload \u0026ndash;tag=tagValue {{.cds.workspace}}/fileToUpload\nSynopsis Inside a job, there are two ways to upload an artifact:\n with a step using action Upload Artifacts with a step script (https://ovh.github.io/cds/workflows/pipelines/actions/builtin/script/), using the worker command: worker upload --tag=\u0026lt;tag\u0026gt; \u0026lt;path\u0026gt;\nworker upload \u0026ndash;tag=  worker upload \u0026ndash;tag={{.cds.version}} {{.cds.workspace}}/files*.yml\n  worker upload [flags]  Options  -h, --help help for upload --tag string Tag for artifact Upload. Tag is mandatory  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/uptodate/",
	"title": "uptodate",
	"tags": [],
	"description": "",
	"content": " engine uptodate check if engine is uptodate\nSynopsis check if engine is uptodate with latest release on github (\u0026ndash;from-github) or from an existing API.\nThis command exit 0 if current binary is uptodate.\nengine uptodate [flags]  Examples engine uptodate --from-github  Options  --api string Update binary from a CDS Engine API --from-github Update binary from latest github release -h, --help help for uptodate  SEE ALSO  engine - CDS Engine  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/user/",
	"title": "user",
	"tags": [],
	"description": "",
	"content": " GetUsers fetches all users from databases    URL /user     Method GET   Permissions Auth: true   Code getUsersHandler    GetUser returns a specific user\u0026rsquo;s information    URL /user/\u0026lt;username\u0026gt;     Method GET   Permissions NeedUsernameOrAdmin: true - Auth: true   Code getUserHandler    UpdateUser modifies user informations    URL /user/\u0026lt;username\u0026gt;     Method PUT   Permissions NeedUsernameOrAdmin: true - Auth: true   Code updateUserHandler    DeleteUser removes a user    URL /user/\u0026lt;username\u0026gt;     Method DELETE   Permissions NeedUsernameOrAdmin: true - Auth: true   Code deleteUserHandler    ConfirmUser verify token send via email and mark user as verified    URL /user/\u0026lt;username\u0026gt;/confirm/\u0026lt;token\u0026gt;     Method GET   Permissions Auth: false   Code confirmUserHandler    getUserGroups returns groups of the user    URL /user/\u0026lt;username\u0026gt;/groups     Method GET   Permissions NeedUsernameOrAdmin: true - Auth: true   Code getUserGroupsHandler    POST /user/\u0026lt;username\u0026gt;/reset    URL /user/\u0026lt;username\u0026gt;/reset     Method POST   Permissions Auth: false   Code resetUserHandler    POST /user/import    URL /user/import     Method POST   Permissions NeedAdmin: true - Auth: true   Code importUsersHandler    AddUser creates a new user and generate verification email    URL /user/signup     Method POST   Permissions Auth: false   Code addUserHandler    GET /user/token    URL /user/token     Method GET   Permissions Auth: true   Code getUserTokenListHandler    GET /user/token/\u0026lt;token\u0026gt;    URL /user/token/\u0026lt;token\u0026gt;     Method GET   Permissions Auth: true   Code getUserTokenHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/group/user/",
	"title": "user",
	"tags": [],
	"description": "",
	"content": " cdsctl group user Manage CDS users group\nSynopsis Manage CDS users group\nOptions  -h, --help help for user  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl group - Manage CDS group cdsctl group user add - Add a user into a group cdsctl group user delete - Delete an user from a group cdsctl group user removeAdmin - Remove a user from administrators of a group cdsctl group user setAdmin - Set a user as an administrator of a group  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/user/",
	"title": "user",
	"tags": [],
	"description": "",
	"content": " cdsctl user Manage CDS user\nSynopsis Manage CDS user\nOptions  -h, --help help for user  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl user confirm - Confirm CDS user password reset cdsctl user list - List CDS users cdsctl user me - Show Current CDS user details cdsctl user reset - Reset CDS user password cdsctl user show - Show CDS user details  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/variable/",
	"title": "variable",
	"tags": [],
	"description": "",
	"content": " GET /variable/type    URL /variable/type     Method GET   Permissions Auth: true   Code getVariableTypeHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/application/variable/",
	"title": "variable",
	"tags": [],
	"description": "",
	"content": " cdsctl application variable Manage CDS application variables\nSynopsis Manage CDS application variables\nOptions  -h, --help help for variable  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl application - Manage CDS application cdsctl application variable add - Add a new variable on application. variable type can be one of password, text, string, key, boolean, number, repository cdsctl application variable delete - Delete CDS application variable cdsctl application variable list - List CDS application variables cdsctl application variable update - Update CDS application variable value  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/environment/variable/",
	"title": "variable",
	"tags": [],
	"description": "",
	"content": " cdsctl environment variable Manage CDS environment variables\nSynopsis Manage CDS environment variables\nOptions  -h, --help help for variable  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl environment - Manage CDS environment cdsctl environment variable add - Add a new variable on environment. variable type can be one of password, text, string, key, boolean, number, repository cdsctl environment variable delete - Delete CDS environment variable cdsctl environment variable list - List CDS environment variables cdsctl environment variable update - Update CDS environment variable value  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/project/variable/",
	"title": "variable",
	"tags": [],
	"description": "",
	"content": " cdsctl project variable Manage CDS project variables\nSynopsis Manage CDS project variables\nOptions  -h, --help help for variable  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl project - Manage CDS project cdsctl project variable add - Add a new variable on project. Variable type can be one of password, text, string, key, boolean, number, repository cdsctl project variable delete - Delete CDS project variable cdsctl project variable list - List CDS project variables cdsctl project variable update - Update CDS project variable value  "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/version/",
	"title": "version",
	"tags": [],
	"description": "",
	"content": " cdsctl version show cdsctl version\nSynopsis show cdsctl version\ncdsctl version [flags]  Options  -h, --help help for version  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility  "
},
{
	"uri": "https://ovh.github.io/cds/cli/engine/version/",
	"title": "version",
	"tags": [],
	"description": "",
	"content": " engine version Display CDS version\nSynopsis Display CDS version\nengine version [flags]  Options  -h, --help help for version  SEE ALSO  engine - CDS Engine  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/version/",
	"title": "version",
	"tags": [],
	"description": "",
	"content": " worker version Print the version of the worker binary\nSynopsis Print the version of the worker binary\nworker version [flags]  Options  -h, --help help for version  SEE ALSO  worker - CDS Worker  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/worker/",
	"title": "worker",
	"tags": [],
	"description": "",
	"content": " POST /worker    URL /worker     Method POST   Permissions Auth: false   Code registerWorkerHandler    GET /worker    URL /worker     Method GET   Permissions Auth: false   Code getWorkersHandler    POST /worker/\u0026lt;id\u0026gt;/disable    URL /worker/\u0026lt;id\u0026gt;/disable     Method POST   Permissions Auth: true   Code disableWorkerHandler    POST /worker/checking    URL /worker/checking     Method POST   Permissions Auth: true   Code workerCheckingHandler    GET /worker/model    URL /worker/model     Method GET   Permissions Auth: true   Code getWorkerModelsHandler    POST /worker/model    URL /worker/model     Method POST   Permissions Auth: true   Code addWorkerModelHandler    DELETE /worker/model/\u0026lt;permModelID\u0026gt;    URL /worker/model/\u0026lt;permModelID\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteWorkerModelHandler    PUT /worker/model/\u0026lt;permModelID\u0026gt;    URL /worker/model/\u0026lt;permModelID\u0026gt;     Method PUT   Permissions Auth: true   Code updateWorkerModelHandler    PUT /worker/model/book/\u0026lt;permModelID\u0026gt;    URL /worker/model/book/\u0026lt;permModelID\u0026gt;     Method PUT   Permissions NeedHatchery: - Auth: true   Code bookWorkerModelHandler    GET /worker/model/capability/type    URL /worker/model/capability/type     Method GET   Permissions Auth: true   Code getRequirementTypesHandler    GET /worker/model/communication    URL /worker/model/communication     Method GET   Permissions Auth: true   Code getWorkerModelCommunicationsHandler    GET /worker/model/enabled    URL /worker/model/enabled     Method GET   Permissions NeedHatchery: - Auth: true   Code getWorkerModelsEnabledHandler    PUT /worker/model/error/\u0026lt;permModelID\u0026gt;    URL /worker/model/error/\u0026lt;permModelID\u0026gt;     Method PUT   Permissions NeedHatchery: - Auth: true   Code spawnErrorWorkerModelHandler    GET /worker/model/type    URL /worker/model/type     Method GET   Permissions Auth: true   Code getWorkerModelTypesHandler    POST /worker/refresh    URL /worker/refresh     Method POST   Permissions Auth: true   Code refreshWorkerHandler    POST /worker/unregister    URL /worker/unregister     Method POST   Permissions Auth: true   Code unregisterWorkerHandler    POST /worker/waiting    URL /worker/waiting     Method POST   Permissions Auth: true   Code workerWaitingHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/worker/",
	"title": "worker",
	"tags": [],
	"description": "",
	"content": " cdsctl worker Manage CDS worker\nSynopsis Manage CDS worker\nOptions  -h, --help help for worker  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl worker disable - Disable CDS workers cdsctl worker list - List CDS workers cdsctl worker model - Manage Worker Model  "
},
{
	"uri": "https://ovh.github.io/cds/cli/worker/",
	"title": "worker",
	"tags": [],
	"description": "",
	"content": " worker CDS Worker\nSynopsis CDS Worker\nworker [flags]  Options  --api string URL of CDS API --auto-update Auto update worker binary from CDS API --basedir string This directory (default TMPDIR os environment var) will contains worker working directory and temporary files --booked-job-id int Booked job id --booked-pb-job-id int Booked Pipeline Build job id --booked-workflow-job-id int Booked Workflow job id --force-exit If single_use=true, force exit. This is useful if it's spawned by an Hatchery (default: worker wait 30min for being killed by hatchery) --from-github Update binary from latest github release --graylog-extra-key string Ex: --graylog-extra-key=xxxx-yyyy --graylog-extra-value string Ex: --graylog-extra-value=xxxx-yyyy --graylog-host string Ex: --graylog-host=xxxx-yyyy --graylog-port string Ex: --graylog-port=12202 --graylog-protocol string Ex: --graylog-protocol=xxxx-yyyy --grpc-api string CDS GRPC tcp address --grpc-insecure Disable GRPC TLS encryption --hatchery int Hatchery ID spawing worker --hatchery-name string Hatchery Name spawing worker -h, --help help for worker --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. --log-level string Log Level: debug, info, notice, warning, critical (default \u0026quot;notice\u0026quot;) --model int Model of worker --name string Name of worker --single-use Exit after executing an action --token string CDS Token --ttl int Worker time to live (minutes) (default 30)  SEE ALSO  worker artifacts - worker artifacts [\u0026ndash;workflow=] [\u0026ndash;number=] [\u0026ndash;tag=] [\u0026ndash;pattern=] worker cache - Inside a project, you can create or retrieve a cache from your worker with a tag worker download - worker download [\u0026ndash;workflow=] [\u0026ndash;number=] [\u0026ndash;tag=] [\u0026ndash;pattern=] worker exit - worker exit worker export - worker export   worker register - worker register worker tag - worker tag key=value key=value worker tmpl - worker tmpl inputFile outputFile worker update - Update worker from CDS API or from CDS Release worker upload - worker upload \u0026ndash;tag=tagValue {{.cds.workspace}}/fileToUpload worker version - Print the version of the worker binary  "
},
{
	"uri": "https://ovh.github.io/cds/cli/api/workflow/",
	"title": "workflow",
	"tags": [],
	"description": "",
	"content": " GET /workflow/artifact/\u0026lt;hash\u0026gt;    URL /workflow/artifact/\u0026lt;hash\u0026gt;     Method GET   Permissions Auth: false   Code downloadworkflowArtifactDirectHandler    GET /workflow/hook    URL /workflow/hook     Method GET   Permissions NeedService: - Auth: true   Code getWorkflowHooksHandler    PUT /workflow/hook/model/\u0026lt;model\u0026gt;    URL /workflow/hook/model/\u0026lt;model\u0026gt;     Method PUT   Permissions NeedAdmin: true - Auth: true   Code putWorkflowHookModelHandler    GET /workflow/hook/model/\u0026lt;model\u0026gt;    URL /workflow/hook/model/\u0026lt;model\u0026gt;     Method GET   Permissions Auth: true   Code getWorkflowHookModelHandler    POST /workflow/hook/model/\u0026lt;model\u0026gt;    URL /workflow/hook/model/\u0026lt;model\u0026gt;     Method POST   Permissions NeedAdmin: true - Auth: true   Code postWorkflowHookModelHandler    "
},
{
	"uri": "https://ovh.github.io/cds/cli/cdsctl/workflow/",
	"title": "workflow",
	"tags": [],
	"description": "",
	"content": " cdsctl workflow Manage CDS workflow\nSynopsis Manage CDS workflow\nOptions  -h, --help help for workflow  Options inherited from parent commands  -f, --file string set configuration file -k, --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -w, --no-warnings do not display warnings -v, --verbose verbose output  SEE ALSO  cdsctl - CDS Command line utility cdsctl workflow advanced - Manage Workflow Advanced cdsctl workflow artifact - Manage Workflow Artifact cdsctl workflow export - Export a workflow cdsctl workflow history - Display CDS workflow runs history cdsctl workflow import - Import a workflow cdsctl workflow init - Init a workflow cdsctl workflow list - List CDS workflows cdsctl workflow pull - Pull a workflow cdsctl workflow push - Push a workflow cdsctl workflow run - Run a CDS workflow cdsctl workflow show - Show a CDS workflow cdsctl workflow status - Check the status of the run cdsctl workflow stop - Stop a CDS workflow or a specific node name  "
}]